# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuotationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def quotations_post(self, body, **kwargs):  # noqa: E501
        """Create A New Quotation  # noqa: E501

        Provided with a valid object representation, this endpoint allows for a new quotation to be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestQuotation body: Represents the request body of a Quotation. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_correlation_id: Header parameter to uniquely identify the request. Must be supplied as a UUID.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_callback_url: The URL supplied by the client that will be used to return the callback in the form of a HTTP PUT.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseQuotation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotations_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.quotations_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def quotations_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create A New Quotation  # noqa: E501

        Provided with a valid object representation, this endpoint allows for a new quotation to be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestQuotation body: Represents the request body of a Quotation. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_correlation_id: Header parameter to uniquely identify the request. Must be supplied as a UUID.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_callback_url: The URL supplied by the client that will be used to return the callback in the form of a HTTP PUT.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseQuotation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_date', 'x_correlation_id', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_callback_url', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `quotations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-CorrelationID'] = params['x_correlation_id']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_callback_url' in params:
            header_params['X-Callback-URL'] = params['x_callback_url']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quotations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseQuotation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quotations_quotation_reference_get(self, quotation_reference, **kwargs):  # noqa: E501
        """View A Quotation  # noqa: E501

        This endpoint returns a specific quotation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_quotation_reference_get(quotation_reference, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quotation_reference: Path variable to uniquely identify the quotation. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseQuotation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotations_quotation_reference_get_with_http_info(quotation_reference, **kwargs)  # noqa: E501
        else:
            (data) = self.quotations_quotation_reference_get_with_http_info(quotation_reference, **kwargs)  # noqa: E501
            return data

    def quotations_quotation_reference_get_with_http_info(self, quotation_reference, **kwargs):  # noqa: E501
        """View A Quotation  # noqa: E501

        This endpoint returns a specific quotation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_quotation_reference_get_with_http_info(quotation_reference, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quotation_reference: Path variable to uniquely identify the quotation. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseQuotation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quotation_reference', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotations_quotation_reference_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quotation_reference' is set
        if ('quotation_reference' not in params or
                params['quotation_reference'] is None):
            raise ValueError("Missing the required parameter `quotation_reference` when calling `quotations_quotation_reference_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quotation_reference' in params:
            path_params['quotationReference'] = params['quotation_reference']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quotations/{quotationReference}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseQuotation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
