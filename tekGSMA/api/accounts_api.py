# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accounts_account_id_accountname_get(self, account_id, **kwargs):  # noqa: E501
        """View Account Name  # noqa: E501

        This endpoint returns the status of a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_accountname_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_account_id_accountname_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_account_id_accountname_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accounts_account_id_accountname_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """View Account Name  # noqa: E501

        This endpoint returns the status of a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_accountname_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_accountname_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_accountname_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountId}/accountname', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_account_id_balance_get(self, account_id, **kwargs):  # noqa: E501
        """View Account Balance  # noqa: E501

        This endpoint returns the balance of an account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_balance_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_account_id_balance_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_account_id_balance_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accounts_account_id_balance_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """View Account Balance  # noqa: E501

        This endpoint returns the balance of an account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_balance_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_balance_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_balance_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountId}/balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_account_id_statemententries_get(self, account_id, **kwargs):  # noqa: E501
        """View Account Statements  # noqa: E501

        The Statement Entries API enables generic representations of transactions to be returned. Typically, the returned representations are used for the purposes of presenting a statement to the account holder. In order to return a statement, an account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_statemententries_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :param int limit: Supports pagination. If this is not supplied, then the server will apply a limit of 50 records returned for each request.
        :param int offset: Supports pagination. This value will indicate the cursor position from where to retrieve the set of records. For example, a limit of 50 and offset of 10 will return records 11 to 60.
        :param datetime from_date_time: Indicates the minimum date for which records should be returned.
        :param datetime to_date_time: Indicates the maximum date for which records should be returned.
        :param str transaction_status: Query variable to uniquely identify the transaction status.
        :param str display_type: Query parameter to to identify the display type of the statement entries to be returned.
        :return: list[ResponseStatementEntries]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_account_id_statemententries_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_account_id_statemententries_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accounts_account_id_statemententries_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """View Account Statements  # noqa: E501

        The Statement Entries API enables generic representations of transactions to be returned. Typically, the returned representations are used for the purposes of presenting a statement to the account holder. In order to return a statement, an account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_statemententries_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :param int limit: Supports pagination. If this is not supplied, then the server will apply a limit of 50 records returned for each request.
        :param int offset: Supports pagination. This value will indicate the cursor position from where to retrieve the set of records. For example, a limit of 50 and offset of 10 will return records 11 to 60.
        :param datetime from_date_time: Indicates the minimum date for which records should be returned.
        :param datetime to_date_time: Indicates the maximum date for which records should be returned.
        :param str transaction_status: Query variable to uniquely identify the transaction status.
        :param str display_type: Query parameter to to identify the display type of the statement entries to be returned.
        :return: list[ResponseStatementEntries]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier', 'limit', 'offset', 'from_date_time', 'to_date_time', 'transaction_status', 'display_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_statemententries_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_statemententries_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'from_date_time' in params:
            query_params.append(('fromDateTime', params['from_date_time']))  # noqa: E501
        if 'to_date_time' in params:
            query_params.append(('toDateTime', params['to_date_time']))  # noqa: E501
        if 'transaction_status' in params:
            query_params.append(('transactionStatus', params['transaction_status']))  # noqa: E501
        if 'display_type' in params:
            query_params.append(('displayType', params['display_type']))  # noqa: E501

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountId}/statemententries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResponseStatementEntries]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_account_id_status_get(self, account_id, **kwargs):  # noqa: E501
        """View Account Status  # noqa: E501

        This endpoint returns the current status of an account. This API accepts multiple identifiers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_status_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_account_id_status_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_account_id_status_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accounts_account_id_status_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """View Account Status  # noqa: E501

        This endpoint returns the current status of an account. This API accepts multiple identifiers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_status_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_account_id_transactions_get(self, account_id, **kwargs):  # noqa: E501
        """View Account Specific Transaction  # noqa: E501

        This endpoint returns transactions linked to a specific account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_transactions_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :param int limit: Supports pagination. If this is not supplied, then the server will apply a limit of 50 records returned for each request.
        :param int offset: Supports pagination. This value will indicate the cursor position from where to retrieve the set of records. For example, a limit of 50 and offset of 10 will return records 11 to 60.
        :param datetime from_date_time: Indicates the minimum date for which records should be returned.
        :param datetime to_date_time: Indicates the maximum date for which records should be returned.
        :param str transaction_status: Query variable to uniquely identify the transaction status.
        :param str transaction_type: Identifies the type of transaction.
        :return: list[ResponseTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_account_id_transactions_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_account_id_transactions_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accounts_account_id_transactions_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """View Account Specific Transaction  # noqa: E501

        This endpoint returns transactions linked to a specific account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_transactions_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Path variable to uniquely identify an account. Up to three account identifiers can be supplied. Identifiers are delimited by $ and values are delimited by @. Example: organisationid@1234$accountid@3333. Valid account identifiers are accountcategory, bankaccountno, accountrank, identityalias, iban, accountid, msisdn, swiftbic, sortcode, organisationid, username, walletid, linkref, consumerno, serviceprovider, storeid, bankname, bankaccounttitle, emailaddress, mandatereference. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :param int limit: Supports pagination. If this is not supplied, then the server will apply a limit of 50 records returned for each request.
        :param int offset: Supports pagination. This value will indicate the cursor position from where to retrieve the set of records. For example, a limit of 50 and offset of 10 will return records 11 to 60.
        :param datetime from_date_time: Indicates the minimum date for which records should be returned.
        :param datetime to_date_time: Indicates the maximum date for which records should be returned.
        :param str transaction_status: Query variable to uniquely identify the transaction status.
        :param str transaction_type: Identifies the type of transaction.
        :return: list[ResponseTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier', 'limit', 'offset', 'from_date_time', 'to_date_time', 'transaction_status', 'transaction_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_transactions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_transactions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'from_date_time' in params:
            query_params.append(('fromDateTime', params['from_date_time']))  # noqa: E501
        if 'to_date_time' in params:
            query_params.append(('toDateTime', params['to_date_time']))  # noqa: E501
        if 'transaction_status' in params:
            query_params.append(('transactionStatus', params['transaction_status']))  # noqa: E501
        if 'transaction_type' in params:
            query_params.append(('transactionType', params['transaction_type']))  # noqa: E501

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResponseTransaction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_balance_get(self, **kwargs):  # noqa: E501
        """View Account Balance  # noqa: E501

        This endpoint returns the balance of an account. As the account is not passed as a parameter, the account is assumed to be that of the calling client.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_balance_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_balance_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_balance_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_balance_get_with_http_info(self, **kwargs):  # noqa: E501
        """View Account Balance  # noqa: E501

        This endpoint returns the balance of an account. As the account is not passed as a parameter, the account is assumed to be that of the calling client.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_balance_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_balance_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_identifier_type_identifier_accountname_get(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Name  # noqa: E501

        This endpoint returns the name of an account holder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_accountname_get(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_identifier_type_identifier_accountname_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_identifier_type_identifier_accountname_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
            return data

    def accounts_identifier_type_identifier_accountname_get_with_http_info(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Name  # noqa: E501

        This endpoint returns the name of an account holder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_accountname_get_with_http_info(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_type', 'identifier', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_identifier_type_identifier_accountname_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_type' is set
        if ('identifier_type' not in params or
                params['identifier_type'] is None):
            raise ValueError("Missing the required parameter `identifier_type` when calling `accounts_identifier_type_identifier_accountname_get`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `accounts_identifier_type_identifier_accountname_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_type' in params:
            path_params['identifierType'] = params['identifier_type']  # noqa: E501
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{identifierType}/{identifier}/accountname', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_identifier_type_identifier_balance_get(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Balance  # noqa: E501

        This endpoint returns the balance of an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_balance_get(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_identifier_type_identifier_balance_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_identifier_type_identifier_balance_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
            return data

    def accounts_identifier_type_identifier_balance_get_with_http_info(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Balance  # noqa: E501

        This endpoint returns the balance of an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_balance_get_with_http_info(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_type', 'identifier', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_identifier_type_identifier_balance_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_type' is set
        if ('identifier_type' not in params or
                params['identifier_type'] is None):
            raise ValueError("Missing the required parameter `identifier_type` when calling `accounts_identifier_type_identifier_balance_get`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `accounts_identifier_type_identifier_balance_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_type' in params:
            path_params['identifierType'] = params['identifier_type']  # noqa: E501
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{identifierType}/{identifier}/balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_identifier_type_identifier_statemententries_get(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Statements  # noqa: E501

        The Statement Entries API enables generic representations of transactions to be returned. Typically, the returned representations are used for the purposes of presenting a statement to the account holder. In order to return a statement, an account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_statemententries_get(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :param int limit: Supports pagination. If this is not supplied, then the server will apply a limit of 50 records returned for each request.
        :param int offset: Supports pagination. This value will indicate the cursor position from where to retrieve the set of records. For example, a limit of 50 and offset of 10 will return records 11 to 60.
        :param datetime from_date_time: Indicates the minimum date for which records should be returned.
        :param datetime to_date_time: Indicates the maximum date for which records should be returned.
        :param str transaction_status: Query variable to uniquely identify the transaction status.
        :param str display_type: Query parameter to to identify the display type of the statement entries to be returned.
        :return: list[ResponseStatementEntries]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_identifier_type_identifier_statemententries_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_identifier_type_identifier_statemententries_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
            return data

    def accounts_identifier_type_identifier_statemententries_get_with_http_info(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Statements  # noqa: E501

        The Statement Entries API enables generic representations of transactions to be returned. Typically, the returned representations are used for the purposes of presenting a statement to the account holder. In order to return a statement, an account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_statemententries_get_with_http_info(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :param int limit: Supports pagination. If this is not supplied, then the server will apply a limit of 50 records returned for each request.
        :param int offset: Supports pagination. This value will indicate the cursor position from where to retrieve the set of records. For example, a limit of 50 and offset of 10 will return records 11 to 60.
        :param datetime from_date_time: Indicates the minimum date for which records should be returned.
        :param datetime to_date_time: Indicates the maximum date for which records should be returned.
        :param str transaction_status: Query variable to uniquely identify the transaction status.
        :param str display_type: Query parameter to to identify the display type of the statement entries to be returned.
        :return: list[ResponseStatementEntries]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_type', 'identifier', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier', 'limit', 'offset', 'from_date_time', 'to_date_time', 'transaction_status', 'display_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_identifier_type_identifier_statemententries_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_type' is set
        if ('identifier_type' not in params or
                params['identifier_type'] is None):
            raise ValueError("Missing the required parameter `identifier_type` when calling `accounts_identifier_type_identifier_statemententries_get`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `accounts_identifier_type_identifier_statemententries_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_type' in params:
            path_params['identifierType'] = params['identifier_type']  # noqa: E501
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'from_date_time' in params:
            query_params.append(('fromDateTime', params['from_date_time']))  # noqa: E501
        if 'to_date_time' in params:
            query_params.append(('toDateTime', params['to_date_time']))  # noqa: E501
        if 'transaction_status' in params:
            query_params.append(('transactionStatus', params['transaction_status']))  # noqa: E501
        if 'display_type' in params:
            query_params.append(('displayType', params['display_type']))  # noqa: E501

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{identifierType}/{identifier}/statemententries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResponseStatementEntries]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_identifier_type_identifier_status_get(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Status  # noqa: E501

        This endpoint returns the current status of an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_status_get(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_identifier_type_identifier_status_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_identifier_type_identifier_status_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
            return data

    def accounts_identifier_type_identifier_status_get_with_http_info(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Status  # noqa: E501

        This endpoint returns the current status of an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_status_get_with_http_info(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseAccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_type', 'identifier', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_identifier_type_identifier_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_type' is set
        if ('identifier_type' not in params or
                params['identifier_type'] is None):
            raise ValueError("Missing the required parameter `identifier_type` when calling `accounts_identifier_type_identifier_status_get`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `accounts_identifier_type_identifier_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_type' in params:
            path_params['identifierType'] = params['identifier_type']  # noqa: E501
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{identifierType}/{identifier}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_identifier_type_identifier_transactions_get(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Specific Transaction  # noqa: E501

        This endpoint returns transactions linked to a specific account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_transactions_get(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :param int limit: Supports pagination. If this is not supplied, then the server will apply a limit of 50 records returned for each request.
        :param int offset: Supports pagination. This value will indicate the cursor position from where to retrieve the set of records. For example, a limit of 50 and offset of 10 will return records 11 to 60.
        :param datetime from_date_time: Indicates the minimum date for which records should be returned.
        :param datetime to_date_time: Indicates the maximum date for which records should be returned.
        :param str transaction_status: Query variable to uniquely identify the transaction status.
        :param str transaction_type: Identifies the type of transaction.
        :return: list[ResponseTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_identifier_type_identifier_transactions_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_identifier_type_identifier_transactions_get_with_http_info(identifier_type, identifier, **kwargs)  # noqa: E501
            return data

    def accounts_identifier_type_identifier_transactions_get_with_http_info(self, identifier_type, identifier, **kwargs):  # noqa: E501
        """View Account Specific Transaction  # noqa: E501

        This endpoint returns transactions linked to a specific account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_identifier_type_identifier_transactions_get_with_http_info(identifier_type, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_type: Path variable to specify the type of the identifier that is used to identify the account. (required)
        :param str identifier: Path variable that contains the account identifier. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :param int limit: Supports pagination. If this is not supplied, then the server will apply a limit of 50 records returned for each request.
        :param int offset: Supports pagination. This value will indicate the cursor position from where to retrieve the set of records. For example, a limit of 50 and offset of 10 will return records 11 to 60.
        :param datetime from_date_time: Indicates the minimum date for which records should be returned.
        :param datetime to_date_time: Indicates the maximum date for which records should be returned.
        :param str transaction_status: Query variable to uniquely identify the transaction status.
        :param str transaction_type: Identifies the type of transaction.
        :return: list[ResponseTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_type', 'identifier', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier', 'limit', 'offset', 'from_date_time', 'to_date_time', 'transaction_status', 'transaction_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_identifier_type_identifier_transactions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_type' is set
        if ('identifier_type' not in params or
                params['identifier_type'] is None):
            raise ValueError("Missing the required parameter `identifier_type` when calling `accounts_identifier_type_identifier_transactions_get`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `accounts_identifier_type_identifier_transactions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_type' in params:
            path_params['identifierType'] = params['identifier_type']  # noqa: E501
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'from_date_time' in params:
            query_params.append(('fromDateTime', params['from_date_time']))  # noqa: E501
        if 'to_date_time' in params:
            query_params.append(('toDateTime', params['to_date_time']))  # noqa: E501
        if 'transaction_status' in params:
            query_params.append(('transactionStatus', params['transaction_status']))  # noqa: E501
        if 'transaction_type' in params:
            query_params.append(('transactionType', params['transaction_type']))  # noqa: E501

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{identifierType}/{identifier}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResponseTransaction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statemententries_transaction_reference_get(self, transaction_reference, **kwargs):  # noqa: E501
        """View Specific Statement  # noqa: E501

        The Statement Entries API enables generic representations of transactions to be returned. Typically, the returned representations are used for the purposes of presenting a statement to the account holder. In order to return a statement, a transaction reference must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statemententries_transaction_reference_get(transaction_reference, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_reference: Path variable to uniquely identify the transaction. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseStatementEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statemententries_transaction_reference_get_with_http_info(transaction_reference, **kwargs)  # noqa: E501
        else:
            (data) = self.statemententries_transaction_reference_get_with_http_info(transaction_reference, **kwargs)  # noqa: E501
            return data

    def statemententries_transaction_reference_get_with_http_info(self, transaction_reference, **kwargs):  # noqa: E501
        """View Specific Statement  # noqa: E501

        The Statement Entries API enables generic representations of transactions to be returned. Typically, the returned representations are used for the purposes of presenting a statement to the account holder. In order to return a statement, a transaction reference must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statemententries_transaction_reference_get_with_http_info(transaction_reference, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_reference: Path variable to uniquely identify the transaction. (required)
        :param datetime x_date: Header parameter to indicate the date and time that the message was originated. It is used for basic message integrity checks, to ensure the request is not stale. Note that the header was previously referenced as 'Date' in version 1.0 of the Mobile Money API.
        :param str x_api_key: Used to pass pre-shared client's API key to the server.
        :param str x_user_bearer: Used to pass user’s access token when OAuth 2.0/OIDC authorisation framework is used for end-user authentication
        :param str x_client_id: Used to pass pre-shared client's identifier to the server.
        :param str x_content_hash: SHA-256 hex digest of the request content (encrypted or plain). Applicable only if basic data integrity checking is to be performed.
        :param str x_user_credential_1: The end-users encrypted security credential. Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_user_credential_2: The end-users encrypted security credential Should only be used when OAuth 2.0/OIDC authorisation framework has not been implemented by the API Provider.
        :param str x_channel: String containing the channel that was used to originate the request. For example USSD, Web, App.
        :param str x_account_holding_institution_identifier_type: A header variable that identifies the type of the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier header.
        :param str x_account_holding_institution_identifier: A header variable that identifies the account holding institution. This header is used to support request routing and should be used in conjunction with the X-Account-Holding-Institution-Identifier-Type header.
        :return: ResponseStatementEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_reference', 'x_date', 'x_api_key', 'x_user_bearer', 'x_client_id', 'x_content_hash', 'x_user_credential_1', 'x_user_credential_2', 'x_channel', 'x_account_holding_institution_identifier_type', 'x_account_holding_institution_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statemententries_transaction_reference_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_reference' is set
        if ('transaction_reference' not in params or
                params['transaction_reference'] is None):
            raise ValueError("Missing the required parameter `transaction_reference` when calling `statemententries_transaction_reference_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_reference' in params:
            path_params['transactionReference'] = params['transaction_reference']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_date' in params:
            header_params['X-Date'] = params['x_date']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501
        if 'x_user_bearer' in params:
            header_params['X-User-Bearer'] = params['x_user_bearer']  # noqa: E501
        if 'x_client_id' in params:
            header_params['X-Client-Id'] = params['x_client_id']  # noqa: E501
        if 'x_content_hash' in params:
            header_params['X-Content-Hash'] = params['x_content_hash']  # noqa: E501
        if 'x_user_credential_1' in params:
            header_params['X-User-Credential-1'] = params['x_user_credential_1']  # noqa: E501
        if 'x_user_credential_2' in params:
            header_params['X-User-Credential-2'] = params['x_user_credential_2']  # noqa: E501
        if 'x_channel' in params:
            header_params['X-Channel'] = params['x_channel']  # noqa: E501
        if 'x_account_holding_institution_identifier_type' in params:
            header_params['X-Account-Holding-Institution-Identifier-Type'] = params['x_account_holding_institution_identifier_type']  # noqa: E501
        if 'x_account_holding_institution_identifier' in params:
            header_params['X-Account-Holding-Institution-Identifier'] = params['x_account_holding_institution_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statemententries/{transactionReference}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseStatementEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
