# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.company_name import CompanyName  # noqa: F401,E501
from swagger_client.models.metadata import Metadata  # noqa: F401,E501
from swagger_client.models.service_provider import ServiceProvider  # noqa: F401,E501
from swagger_client.models.service_provider_sub_type import ServiceProviderSubType  # noqa: F401,E501
from swagger_client.models.service_provider_type import ServiceProviderType  # noqa: F401,E501


class ResponseBillCompanies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'CompanyName',
        'service_provider': 'ServiceProvider',
        'service_provider_type': 'ServiceProviderType',
        'service_provider_sub_type': 'ServiceProviderSubType',
        'supplementary_service_provider_details': 'list[Metadata]'
    }

    attribute_map = {
        'company_name': 'companyName',
        'service_provider': 'serviceProvider',
        'service_provider_type': 'serviceProviderType',
        'service_provider_sub_type': 'serviceProviderSubType',
        'supplementary_service_provider_details': 'supplementaryServiceProviderDetails'
    }

    def __init__(self, company_name=None, service_provider=None, service_provider_type=None, service_provider_sub_type=None, supplementary_service_provider_details=None):  # noqa: E501
        """ResponseBillCompanies - a model defined in Swagger"""  # noqa: E501
        self._company_name = None
        self._service_provider = None
        self._service_provider_type = None
        self._service_provider_sub_type = None
        self._supplementary_service_provider_details = None
        self.discriminator = None
        self.company_name = company_name
        self.service_provider = service_provider
        if service_provider_type is not None:
            self.service_provider_type = service_provider_type
        if service_provider_sub_type is not None:
            self.service_provider_sub_type = service_provider_sub_type
        if supplementary_service_provider_details is not None:
            self.supplementary_service_provider_details = supplementary_service_provider_details

    @property
    def company_name(self):
        """Gets the company_name of this ResponseBillCompanies.  # noqa: E501


        :return: The company_name of this ResponseBillCompanies.  # noqa: E501
        :rtype: CompanyName
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ResponseBillCompanies.


        :param company_name: The company_name of this ResponseBillCompanies.  # noqa: E501
        :type: CompanyName
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def service_provider(self):
        """Gets the service_provider of this ResponseBillCompanies.  # noqa: E501


        :return: The service_provider of this ResponseBillCompanies.  # noqa: E501
        :rtype: ServiceProvider
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider):
        """Sets the service_provider of this ResponseBillCompanies.


        :param service_provider: The service_provider of this ResponseBillCompanies.  # noqa: E501
        :type: ServiceProvider
        """
        if service_provider is None:
            raise ValueError("Invalid value for `service_provider`, must not be `None`")  # noqa: E501

        self._service_provider = service_provider

    @property
    def service_provider_type(self):
        """Gets the service_provider_type of this ResponseBillCompanies.  # noqa: E501


        :return: The service_provider_type of this ResponseBillCompanies.  # noqa: E501
        :rtype: ServiceProviderType
        """
        return self._service_provider_type

    @service_provider_type.setter
    def service_provider_type(self, service_provider_type):
        """Sets the service_provider_type of this ResponseBillCompanies.


        :param service_provider_type: The service_provider_type of this ResponseBillCompanies.  # noqa: E501
        :type: ServiceProviderType
        """

        self._service_provider_type = service_provider_type

    @property
    def service_provider_sub_type(self):
        """Gets the service_provider_sub_type of this ResponseBillCompanies.  # noqa: E501


        :return: The service_provider_sub_type of this ResponseBillCompanies.  # noqa: E501
        :rtype: ServiceProviderSubType
        """
        return self._service_provider_sub_type

    @service_provider_sub_type.setter
    def service_provider_sub_type(self, service_provider_sub_type):
        """Sets the service_provider_sub_type of this ResponseBillCompanies.


        :param service_provider_sub_type: The service_provider_sub_type of this ResponseBillCompanies.  # noqa: E501
        :type: ServiceProviderSubType
        """

        self._service_provider_sub_type = service_provider_sub_type

    @property
    def supplementary_service_provider_details(self):
        """Gets the supplementary_service_provider_details of this ResponseBillCompanies.  # noqa: E501


        :return: The supplementary_service_provider_details of this ResponseBillCompanies.  # noqa: E501
        :rtype: list[Metadata]
        """
        return self._supplementary_service_provider_details

    @supplementary_service_provider_details.setter
    def supplementary_service_provider_details(self, supplementary_service_provider_details):
        """Sets the supplementary_service_provider_details of this ResponseBillCompanies.


        :param supplementary_service_provider_details: The supplementary_service_provider_details of this ResponseBillCompanies.  # noqa: E501
        :type: list[Metadata]
        """

        self._supplementary_service_provider_details = supplementary_service_provider_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseBillCompanies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseBillCompanies):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
