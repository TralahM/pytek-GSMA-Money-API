# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.debit_party_array import DebitPartyArray  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501


class RequestLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'Object',
        'mode': 'Object',
        'source_account_identifiers': 'DebitPartyArray'
    }

    attribute_map = {
        'status': 'status',
        'mode': 'mode',
        'source_account_identifiers': 'sourceAccountIdentifiers'
    }

    def __init__(self, status=None, mode=None, source_account_identifiers=None):  # noqa: E501
        """RequestLink - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._mode = None
        self._source_account_identifiers = None
        self.discriminator = None
        self.status = status
        self.mode = mode
        self.source_account_identifiers = source_account_identifiers

    @property
    def status(self):
        """Gets the status of this RequestLink.  # noqa: E501

        Indicates the status of the Link.  # noqa: E501

        :return: The status of this RequestLink.  # noqa: E501
        :rtype: Object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RequestLink.

        Indicates the status of the Link.  # noqa: E501

        :param status: The status of this RequestLink.  # noqa: E501
        :type: Object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def mode(self):
        """Gets the mode of this RequestLink.  # noqa: E501

        Indicates the mode of operation for the Link.  # noqa: E501

        :return: The mode of this RequestLink.  # noqa: E501
        :rtype: Object
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RequestLink.

        Indicates the mode of operation for the Link.  # noqa: E501

        :param mode: The mode of this RequestLink.  # noqa: E501
        :type: Object
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def source_account_identifiers(self):
        """Gets the source_account_identifiers of this RequestLink.  # noqa: E501


        :return: The source_account_identifiers of this RequestLink.  # noqa: E501
        :rtype: DebitPartyArray
        """
        return self._source_account_identifiers

    @source_account_identifiers.setter
    def source_account_identifiers(self, source_account_identifiers):
        """Sets the source_account_identifiers of this RequestLink.


        :param source_account_identifiers: The source_account_identifiers of this RequestLink.  # noqa: E501
        :type: DebitPartyArray
        """
        if source_account_identifiers is None:
            raise ValueError("Invalid value for `source_account_identifiers`, must not be `None`")  # noqa: E501

        self._source_account_identifiers = source_account_identifiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
