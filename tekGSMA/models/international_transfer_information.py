# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.object import Object  # noqa: F401,E501
from swagger_client.models.quotation_reference import QuotationReference  # noqa: F401,E501
from swagger_client.models.quote_id import QuoteId  # noqa: F401,E501
from swagger_client.models.relationship_sender import RelationshipSender  # noqa: F401,E501
from swagger_client.models.remittance_purpose import RemittancePurpose  # noqa: F401,E501


class InternationalTransferInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'origin_country': 'Object',
        'quotation_reference': 'QuotationReference',
        'quote_id': 'QuoteId',
        'receiving_country': 'Object',
        'remittance_purpose': 'RemittancePurpose',
        'relationship_sender': 'RelationshipSender',
        'delivery_method': 'Object'
    }

    attribute_map = {
        'origin_country': 'originCountry',
        'quotation_reference': 'quotationReference',
        'quote_id': 'quoteId',
        'receiving_country': 'receivingCountry',
        'remittance_purpose': 'remittancePurpose',
        'relationship_sender': 'relationshipSender',
        'delivery_method': 'deliveryMethod'
    }

    def __init__(self, origin_country=None, quotation_reference=None, quote_id=None, receiving_country=None, remittance_purpose=None, relationship_sender=None, delivery_method=None):  # noqa: E501
        """InternationalTransferInformation - a model defined in Swagger"""  # noqa: E501
        self._origin_country = None
        self._quotation_reference = None
        self._quote_id = None
        self._receiving_country = None
        self._remittance_purpose = None
        self._relationship_sender = None
        self._delivery_method = None
        self.discriminator = None
        self.origin_country = origin_country
        if quotation_reference is not None:
            self.quotation_reference = quotation_reference
        if quote_id is not None:
            self.quote_id = quote_id
        if receiving_country is not None:
            self.receiving_country = receiving_country
        if remittance_purpose is not None:
            self.remittance_purpose = remittance_purpose
        if relationship_sender is not None:
            self.relationship_sender = relationship_sender
        if delivery_method is not None:
            self.delivery_method = delivery_method

    @property
    def origin_country(self):
        """Gets the origin_country of this InternationalTransferInformation.  # noqa: E501

        The originating country of the transaction, i.e. the country where the transaction was initiated.  # noqa: E501

        :return: The origin_country of this InternationalTransferInformation.  # noqa: E501
        :rtype: Object
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this InternationalTransferInformation.

        The originating country of the transaction, i.e. the country where the transaction was initiated.  # noqa: E501

        :param origin_country: The origin_country of this InternationalTransferInformation.  # noqa: E501
        :type: Object
        """
        if origin_country is None:
            raise ValueError("Invalid value for `origin_country`, must not be `None`")  # noqa: E501

        self._origin_country = origin_country

    @property
    def quotation_reference(self):
        """Gets the quotation_reference of this InternationalTransferInformation.  # noqa: E501


        :return: The quotation_reference of this InternationalTransferInformation.  # noqa: E501
        :rtype: QuotationReference
        """
        return self._quotation_reference

    @quotation_reference.setter
    def quotation_reference(self, quotation_reference):
        """Sets the quotation_reference of this InternationalTransferInformation.


        :param quotation_reference: The quotation_reference of this InternationalTransferInformation.  # noqa: E501
        :type: QuotationReference
        """

        self._quotation_reference = quotation_reference

    @property
    def quote_id(self):
        """Gets the quote_id of this InternationalTransferInformation.  # noqa: E501


        :return: The quote_id of this InternationalTransferInformation.  # noqa: E501
        :rtype: QuoteId
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this InternationalTransferInformation.


        :param quote_id: The quote_id of this InternationalTransferInformation.  # noqa: E501
        :type: QuoteId
        """

        self._quote_id = quote_id

    @property
    def receiving_country(self):
        """Gets the receiving_country of this InternationalTransferInformation.  # noqa: E501

        Destination Country of the international remittance.  # noqa: E501

        :return: The receiving_country of this InternationalTransferInformation.  # noqa: E501
        :rtype: Object
        """
        return self._receiving_country

    @receiving_country.setter
    def receiving_country(self, receiving_country):
        """Sets the receiving_country of this InternationalTransferInformation.

        Destination Country of the international remittance.  # noqa: E501

        :param receiving_country: The receiving_country of this InternationalTransferInformation.  # noqa: E501
        :type: Object
        """

        self._receiving_country = receiving_country

    @property
    def remittance_purpose(self):
        """Gets the remittance_purpose of this InternationalTransferInformation.  # noqa: E501


        :return: The remittance_purpose of this InternationalTransferInformation.  # noqa: E501
        :rtype: RemittancePurpose
        """
        return self._remittance_purpose

    @remittance_purpose.setter
    def remittance_purpose(self, remittance_purpose):
        """Sets the remittance_purpose of this InternationalTransferInformation.


        :param remittance_purpose: The remittance_purpose of this InternationalTransferInformation.  # noqa: E501
        :type: RemittancePurpose
        """

        self._remittance_purpose = remittance_purpose

    @property
    def relationship_sender(self):
        """Gets the relationship_sender of this InternationalTransferInformation.  # noqa: E501


        :return: The relationship_sender of this InternationalTransferInformation.  # noqa: E501
        :rtype: RelationshipSender
        """
        return self._relationship_sender

    @relationship_sender.setter
    def relationship_sender(self, relationship_sender):
        """Sets the relationship_sender of this InternationalTransferInformation.


        :param relationship_sender: The relationship_sender of this InternationalTransferInformation.  # noqa: E501
        :type: RelationshipSender
        """

        self._relationship_sender = relationship_sender

    @property
    def delivery_method(self):
        """Gets the delivery_method of this InternationalTransferInformation.  # noqa: E501

        The recipient delivery method as chosen by the sender.  # noqa: E501

        :return: The delivery_method of this InternationalTransferInformation.  # noqa: E501
        :rtype: Object
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this InternationalTransferInformation.

        The recipient delivery method as chosen by the sender.  # noqa: E501

        :param delivery_method: The delivery_method of this InternationalTransferInformation.  # noqa: E501
        :type: Object
        """

        self._delivery_method = delivery_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternationalTransferInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternationalTransferInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
