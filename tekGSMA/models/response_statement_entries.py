# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.creation_date import CreationDate  # noqa: F401,E501
from swagger_client.models.credit_party_array import CreditPartyArray  # noqa: F401,E501
from swagger_client.models.date_created import DateCreated  # noqa: F401,E501
from swagger_client.models.date_modified import DateModified  # noqa: F401,E501
from swagger_client.models.debit_party_array import DebitPartyArray  # noqa: F401,E501
from swagger_client.models.description_text import DescriptionText  # noqa: F401,E501
from swagger_client.models.display_type import DisplayType  # noqa: F401,E501
from swagger_client.models.modification_date import ModificationDate  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501
from swagger_client.models.request_date import RequestDate  # noqa: F401,E501
from swagger_client.models.transaction_receipt import TransactionReceipt  # noqa: F401,E501
from swagger_client.models.transaction_reference import TransactionReference  # noqa: F401,E501
from swagger_client.models.transaction_status import TransactionStatus  # noqa: F401,E501


class ResponseStatementEntries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'Object',
        'currency': 'Object',
        'display_type': 'DisplayType',
        'transaction_status': 'TransactionStatus',
        'description_text': 'DescriptionText',
        'request_date': 'RequestDate',
        'creation_date': 'CreationDate',
        'modification_date': 'ModificationDate',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified',
        'transaction_reference': 'TransactionReference',
        'transaction_receipt': 'TransactionReceipt',
        'debit_party': 'DebitPartyArray',
        'credit_party': 'CreditPartyArray'
    }

    attribute_map = {
        'amount': 'amount',
        'currency': 'currency',
        'display_type': 'displayType',
        'transaction_status': 'transactionStatus',
        'description_text': 'descriptionText',
        'request_date': 'requestDate',
        'creation_date': 'creationDate',
        'modification_date': 'modificationDate',
        'date_created': 'dateCreated',
        'date_modified': 'dateModified',
        'transaction_reference': 'transactionReference',
        'transaction_receipt': 'transactionReceipt',
        'debit_party': 'debitParty',
        'credit_party': 'creditParty'
    }

    def __init__(self, amount=None, currency=None, display_type=None, transaction_status=None, description_text=None, request_date=None, creation_date=None, modification_date=None, date_created=None, date_modified=None, transaction_reference=None, transaction_receipt=None, debit_party=None, credit_party=None):  # noqa: E501
        """ResponseStatementEntries - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._currency = None
        self._display_type = None
        self._transaction_status = None
        self._description_text = None
        self._request_date = None
        self._creation_date = None
        self._modification_date = None
        self._date_created = None
        self._date_modified = None
        self._transaction_reference = None
        self._transaction_receipt = None
        self._debit_party = None
        self._credit_party = None
        self.discriminator = None
        self.amount = amount
        self.currency = currency
        if display_type is not None:
            self.display_type = display_type
        self.transaction_status = transaction_status
        if description_text is not None:
            self.description_text = description_text
        if request_date is not None:
            self.request_date = request_date
        if creation_date is not None:
            self.creation_date = creation_date
        if modification_date is not None:
            self.modification_date = modification_date
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        self.transaction_reference = transaction_reference
        if transaction_receipt is not None:
            self.transaction_receipt = transaction_receipt
        self.debit_party = debit_party
        self.credit_party = credit_party

    @property
    def amount(self):
        """Gets the amount of this ResponseStatementEntries.  # noqa: E501

        Amount of the transaction.  # noqa: E501

        :return: The amount of this ResponseStatementEntries.  # noqa: E501
        :rtype: Object
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ResponseStatementEntries.

        Amount of the transaction.  # noqa: E501

        :param amount: The amount of this ResponseStatementEntries.  # noqa: E501
        :type: Object
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this ResponseStatementEntries.  # noqa: E501

        Currency of the transaction.  # noqa: E501

        :return: The currency of this ResponseStatementEntries.  # noqa: E501
        :rtype: Object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ResponseStatementEntries.

        Currency of the transaction.  # noqa: E501

        :param currency: The currency of this ResponseStatementEntries.  # noqa: E501
        :type: Object
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def display_type(self):
        """Gets the display_type of this ResponseStatementEntries.  # noqa: E501


        :return: The display_type of this ResponseStatementEntries.  # noqa: E501
        :rtype: DisplayType
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this ResponseStatementEntries.


        :param display_type: The display_type of this ResponseStatementEntries.  # noqa: E501
        :type: DisplayType
        """

        self._display_type = display_type

    @property
    def transaction_status(self):
        """Gets the transaction_status of this ResponseStatementEntries.  # noqa: E501


        :return: The transaction_status of this ResponseStatementEntries.  # noqa: E501
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this ResponseStatementEntries.


        :param transaction_status: The transaction_status of this ResponseStatementEntries.  # noqa: E501
        :type: TransactionStatus
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")  # noqa: E501

        self._transaction_status = transaction_status

    @property
    def description_text(self):
        """Gets the description_text of this ResponseStatementEntries.  # noqa: E501


        :return: The description_text of this ResponseStatementEntries.  # noqa: E501
        :rtype: DescriptionText
        """
        return self._description_text

    @description_text.setter
    def description_text(self, description_text):
        """Sets the description_text of this ResponseStatementEntries.


        :param description_text: The description_text of this ResponseStatementEntries.  # noqa: E501
        :type: DescriptionText
        """

        self._description_text = description_text

    @property
    def request_date(self):
        """Gets the request_date of this ResponseStatementEntries.  # noqa: E501


        :return: The request_date of this ResponseStatementEntries.  # noqa: E501
        :rtype: RequestDate
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this ResponseStatementEntries.


        :param request_date: The request_date of this ResponseStatementEntries.  # noqa: E501
        :type: RequestDate
        """

        self._request_date = request_date

    @property
    def creation_date(self):
        """Gets the creation_date of this ResponseStatementEntries.  # noqa: E501


        :return: The creation_date of this ResponseStatementEntries.  # noqa: E501
        :rtype: CreationDate
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ResponseStatementEntries.


        :param creation_date: The creation_date of this ResponseStatementEntries.  # noqa: E501
        :type: CreationDate
        """

        self._creation_date = creation_date

    @property
    def modification_date(self):
        """Gets the modification_date of this ResponseStatementEntries.  # noqa: E501


        :return: The modification_date of this ResponseStatementEntries.  # noqa: E501
        :rtype: ModificationDate
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ResponseStatementEntries.


        :param modification_date: The modification_date of this ResponseStatementEntries.  # noqa: E501
        :type: ModificationDate
        """

        self._modification_date = modification_date

    @property
    def date_created(self):
        """Gets the date_created of this ResponseStatementEntries.  # noqa: E501


        :return: The date_created of this ResponseStatementEntries.  # noqa: E501
        :rtype: DateCreated
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ResponseStatementEntries.


        :param date_created: The date_created of this ResponseStatementEntries.  # noqa: E501
        :type: DateCreated
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this ResponseStatementEntries.  # noqa: E501


        :return: The date_modified of this ResponseStatementEntries.  # noqa: E501
        :rtype: DateModified
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ResponseStatementEntries.


        :param date_modified: The date_modified of this ResponseStatementEntries.  # noqa: E501
        :type: DateModified
        """

        self._date_modified = date_modified

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this ResponseStatementEntries.  # noqa: E501


        :return: The transaction_reference of this ResponseStatementEntries.  # noqa: E501
        :rtype: TransactionReference
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this ResponseStatementEntries.


        :param transaction_reference: The transaction_reference of this ResponseStatementEntries.  # noqa: E501
        :type: TransactionReference
        """
        if transaction_reference is None:
            raise ValueError("Invalid value for `transaction_reference`, must not be `None`")  # noqa: E501

        self._transaction_reference = transaction_reference

    @property
    def transaction_receipt(self):
        """Gets the transaction_receipt of this ResponseStatementEntries.  # noqa: E501


        :return: The transaction_receipt of this ResponseStatementEntries.  # noqa: E501
        :rtype: TransactionReceipt
        """
        return self._transaction_receipt

    @transaction_receipt.setter
    def transaction_receipt(self, transaction_receipt):
        """Sets the transaction_receipt of this ResponseStatementEntries.


        :param transaction_receipt: The transaction_receipt of this ResponseStatementEntries.  # noqa: E501
        :type: TransactionReceipt
        """

        self._transaction_receipt = transaction_receipt

    @property
    def debit_party(self):
        """Gets the debit_party of this ResponseStatementEntries.  # noqa: E501


        :return: The debit_party of this ResponseStatementEntries.  # noqa: E501
        :rtype: DebitPartyArray
        """
        return self._debit_party

    @debit_party.setter
    def debit_party(self, debit_party):
        """Sets the debit_party of this ResponseStatementEntries.


        :param debit_party: The debit_party of this ResponseStatementEntries.  # noqa: E501
        :type: DebitPartyArray
        """
        if debit_party is None:
            raise ValueError("Invalid value for `debit_party`, must not be `None`")  # noqa: E501

        self._debit_party = debit_party

    @property
    def credit_party(self):
        """Gets the credit_party of this ResponseStatementEntries.  # noqa: E501


        :return: The credit_party of this ResponseStatementEntries.  # noqa: E501
        :rtype: CreditPartyArray
        """
        return self._credit_party

    @credit_party.setter
    def credit_party(self, credit_party):
        """Sets the credit_party of this ResponseStatementEntries.


        :param credit_party: The credit_party of this ResponseStatementEntries.  # noqa: E501
        :type: CreditPartyArray
        """
        if credit_party is None:
            raise ValueError("Invalid value for `credit_party`, must not be `None`")  # noqa: E501

        self._credit_party = credit_party

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseStatementEntries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseStatementEntries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
