# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.object import Object  # noqa: F401,E501


class ErrorObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_category': 'str',
        'error_code': 'str',
        'errordescription': 'str',
        'error_date_time': 'datetime',
        'error_parameters': 'Object'
    }

    attribute_map = {
        'error_category': 'errorCategory',
        'error_code': 'errorCode',
        'errordescription': 'errordescription',
        'error_date_time': 'errorDateTime',
        'error_parameters': 'errorParameters'
    }

    def __init__(self, error_category=None, error_code=None, errordescription=None, error_date_time=None, error_parameters=None):  # noqa: E501
        """ErrorObject - a model defined in Swagger"""  # noqa: E501
        self._error_category = None
        self._error_code = None
        self._errordescription = None
        self._error_date_time = None
        self._error_parameters = None
        self.discriminator = None
        self.error_category = error_category
        self.error_code = error_code
        if errordescription is not None:
            self.errordescription = errordescription
        if error_date_time is not None:
            self.error_date_time = error_date_time
        if error_parameters is not None:
            self.error_parameters = error_parameters

    @property
    def error_category(self):
        """Gets the error_category of this ErrorObject.  # noqa: E501

        The category grouping for the error.  # noqa: E501

        :return: The error_category of this ErrorObject.  # noqa: E501
        :rtype: str
        """
        return self._error_category

    @error_category.setter
    def error_category(self, error_category):
        """Sets the error_category of this ErrorObject.

        The category grouping for the error.  # noqa: E501

        :param error_category: The error_category of this ErrorObject.  # noqa: E501
        :type: str
        """
        if error_category is None:
            raise ValueError("Invalid value for `error_category`, must not be `None`")  # noqa: E501
        allowed_values = ["businessRule", "validation", "authorisation", "identification", "internal", "serviceUnavailable"]  # noqa: E501
        if error_category not in allowed_values:
            raise ValueError(
                "Invalid value for `error_category` ({0}), must be one of {1}"  # noqa: E501
                .format(error_category, allowed_values)
            )

        self._error_category = error_category

    @property
    def error_code(self):
        """Gets the error_code of this ErrorObject.  # noqa: E501

        The harmonised error code identifying the reason for error.  # noqa: E501

        :return: The error_code of this ErrorObject.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorObject.

        The harmonised error code identifying the reason for error.  # noqa: E501

        :param error_code: The error_code of this ErrorObject.  # noqa: E501
        :type: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501
        allowed_values = ["genericError", "dailyVolumeLimitExceeded", "dailyValueLimitExceeded", "weeklyVolumeLimitExceeded", "weeklyValueLimitExceeded", "monthlyVolumeLimitExceeded", "monthlyValueLimitExceeded", "accountMaxTotalVolumeExceeded", "accountMaxTotalValueExceeded", "lessThanTransactionMinValue", "greaterThanTransactionMaxValue", "maxBalanceExceeded", "samePartiesError", "duplicateRequest", "insufficientFunds", "incorrectState", "underPaymentNotAllowed", "overPaymentNotAllowed", "rateLimitError", "transactionTypeError", "noMandateAuthority", "linkViolation", "countryofOriginNotPermitted", "nationalityNotPermitted", "idDocumentNotSupported", "issuingCountryNotSupported", "quoteHasExpired", "identifierError", "lengthError", "formatError", "negativeValue", "currencyNotSupported", "mandatoryValueNotSupplied", "invalidOffset", "clientAuthorisationError", "requestDeclined", "servicingPartyAuthorisationError", "requestingPartyAuthorisationError"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    @property
    def errordescription(self):
        """Gets the errordescription of this ErrorObject.  # noqa: E501

        A textual description of the error.\"  # noqa: E501

        :return: The errordescription of this ErrorObject.  # noqa: E501
        :rtype: str
        """
        return self._errordescription

    @errordescription.setter
    def errordescription(self, errordescription):
        """Sets the errordescription of this ErrorObject.

        A textual description of the error.\"  # noqa: E501

        :param errordescription: The errordescription of this ErrorObject.  # noqa: E501
        :type: str
        """

        self._errordescription = errordescription

    @property
    def error_date_time(self):
        """Gets the error_date_time of this ErrorObject.  # noqa: E501

        The timestamp indicating when the error occurred.  # noqa: E501

        :return: The error_date_time of this ErrorObject.  # noqa: E501
        :rtype: datetime
        """
        return self._error_date_time

    @error_date_time.setter
    def error_date_time(self, error_date_time):
        """Sets the error_date_time of this ErrorObject.

        The timestamp indicating when the error occurred.  # noqa: E501

        :param error_date_time: The error_date_time of this ErrorObject.  # noqa: E501
        :type: datetime
        """

        self._error_date_time = error_date_time

    @property
    def error_parameters(self):
        """Gets the error_parameters of this ErrorObject.  # noqa: E501

        Diagnostic information in the form of key/value pairs relating to the error.  # noqa: E501

        :return: The error_parameters of this ErrorObject.  # noqa: E501
        :rtype: Object
        """
        return self._error_parameters

    @error_parameters.setter
    def error_parameters(self, error_parameters):
        """Sets the error_parameters of this ErrorObject.

        Diagnostic information in the form of key/value pairs relating to the error.  # noqa: E501

        :param error_parameters: The error_parameters of this ErrorObject.  # noqa: E501
        :type: Object
        """

        self._error_parameters = error_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
