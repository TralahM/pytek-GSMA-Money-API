# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.credit_party_array import CreditPartyArray  # noqa: F401,E501
from swagger_client.models.debit_party_array import DebitPartyArray  # noqa: F401,E501
from swagger_client.models.link import Link  # noqa: F401,E501
from swagger_client.models.requesting_organisation_transaction_reference import RequestingOrganisationTransactionReference  # noqa: F401,E501
from swagger_client.models.transaction_completed_date import TransactionCompletedDate  # noqa: F401,E501
from swagger_client.models.transaction_completion_date import TransactionCompletionDate  # noqa: F401,E501
from swagger_client.models.transaction_reference import TransactionReference  # noqa: F401,E501


class ResponseBatchTransactionCompletion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_reference': 'TransactionReference',
        'completion_date': 'TransactionCompletionDate',
        'completed_date': 'TransactionCompletedDate',
        'link': 'Link',
        'debit_party': 'DebitPartyArray',
        'credit_party': 'CreditPartyArray',
        'requesting_organisation_transaction_reference': 'RequestingOrganisationTransactionReference'
    }

    attribute_map = {
        'transaction_reference': 'transactionReference',
        'completion_date': 'completionDate',
        'completed_date': 'completedDate',
        'link': 'link',
        'debit_party': 'debitParty',
        'credit_party': 'creditParty',
        'requesting_organisation_transaction_reference': 'requestingOrganisationTransactionReference'
    }

    def __init__(self, transaction_reference=None, completion_date=None, completed_date=None, link=None, debit_party=None, credit_party=None, requesting_organisation_transaction_reference=None):  # noqa: E501
        """ResponseBatchTransactionCompletion - a model defined in Swagger"""  # noqa: E501
        self._transaction_reference = None
        self._completion_date = None
        self._completed_date = None
        self._link = None
        self._debit_party = None
        self._credit_party = None
        self._requesting_organisation_transaction_reference = None
        self.discriminator = None
        self.transaction_reference = transaction_reference
        self.completion_date = completion_date
        if completed_date is not None:
            self.completed_date = completed_date
        self.link = link
        self.debit_party = debit_party
        self.credit_party = credit_party
        if requesting_organisation_transaction_reference is not None:
            self.requesting_organisation_transaction_reference = requesting_organisation_transaction_reference

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this ResponseBatchTransactionCompletion.  # noqa: E501


        :return: The transaction_reference of this ResponseBatchTransactionCompletion.  # noqa: E501
        :rtype: TransactionReference
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this ResponseBatchTransactionCompletion.


        :param transaction_reference: The transaction_reference of this ResponseBatchTransactionCompletion.  # noqa: E501
        :type: TransactionReference
        """
        if transaction_reference is None:
            raise ValueError("Invalid value for `transaction_reference`, must not be `None`")  # noqa: E501

        self._transaction_reference = transaction_reference

    @property
    def completion_date(self):
        """Gets the completion_date of this ResponseBatchTransactionCompletion.  # noqa: E501


        :return: The completion_date of this ResponseBatchTransactionCompletion.  # noqa: E501
        :rtype: TransactionCompletionDate
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this ResponseBatchTransactionCompletion.


        :param completion_date: The completion_date of this ResponseBatchTransactionCompletion.  # noqa: E501
        :type: TransactionCompletionDate
        """
        if completion_date is None:
            raise ValueError("Invalid value for `completion_date`, must not be `None`")  # noqa: E501

        self._completion_date = completion_date

    @property
    def completed_date(self):
        """Gets the completed_date of this ResponseBatchTransactionCompletion.  # noqa: E501


        :return: The completed_date of this ResponseBatchTransactionCompletion.  # noqa: E501
        :rtype: TransactionCompletedDate
        """
        return self._completed_date

    @completed_date.setter
    def completed_date(self, completed_date):
        """Sets the completed_date of this ResponseBatchTransactionCompletion.


        :param completed_date: The completed_date of this ResponseBatchTransactionCompletion.  # noqa: E501
        :type: TransactionCompletedDate
        """

        self._completed_date = completed_date

    @property
    def link(self):
        """Gets the link of this ResponseBatchTransactionCompletion.  # noqa: E501


        :return: The link of this ResponseBatchTransactionCompletion.  # noqa: E501
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ResponseBatchTransactionCompletion.


        :param link: The link of this ResponseBatchTransactionCompletion.  # noqa: E501
        :type: Link
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def debit_party(self):
        """Gets the debit_party of this ResponseBatchTransactionCompletion.  # noqa: E501


        :return: The debit_party of this ResponseBatchTransactionCompletion.  # noqa: E501
        :rtype: DebitPartyArray
        """
        return self._debit_party

    @debit_party.setter
    def debit_party(self, debit_party):
        """Sets the debit_party of this ResponseBatchTransactionCompletion.


        :param debit_party: The debit_party of this ResponseBatchTransactionCompletion.  # noqa: E501
        :type: DebitPartyArray
        """
        if debit_party is None:
            raise ValueError("Invalid value for `debit_party`, must not be `None`")  # noqa: E501

        self._debit_party = debit_party

    @property
    def credit_party(self):
        """Gets the credit_party of this ResponseBatchTransactionCompletion.  # noqa: E501


        :return: The credit_party of this ResponseBatchTransactionCompletion.  # noqa: E501
        :rtype: CreditPartyArray
        """
        return self._credit_party

    @credit_party.setter
    def credit_party(self, credit_party):
        """Sets the credit_party of this ResponseBatchTransactionCompletion.


        :param credit_party: The credit_party of this ResponseBatchTransactionCompletion.  # noqa: E501
        :type: CreditPartyArray
        """
        if credit_party is None:
            raise ValueError("Invalid value for `credit_party`, must not be `None`")  # noqa: E501

        self._credit_party = credit_party

    @property
    def requesting_organisation_transaction_reference(self):
        """Gets the requesting_organisation_transaction_reference of this ResponseBatchTransactionCompletion.  # noqa: E501


        :return: The requesting_organisation_transaction_reference of this ResponseBatchTransactionCompletion.  # noqa: E501
        :rtype: RequestingOrganisationTransactionReference
        """
        return self._requesting_organisation_transaction_reference

    @requesting_organisation_transaction_reference.setter
    def requesting_organisation_transaction_reference(self, requesting_organisation_transaction_reference):
        """Sets the requesting_organisation_transaction_reference of this ResponseBatchTransactionCompletion.


        :param requesting_organisation_transaction_reference: The requesting_organisation_transaction_reference of this ResponseBatchTransactionCompletion.  # noqa: E501
        :type: RequestingOrganisationTransactionReference
        """

        self._requesting_organisation_transaction_reference = requesting_organisation_transaction_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseBatchTransactionCompletion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseBatchTransactionCompletion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
