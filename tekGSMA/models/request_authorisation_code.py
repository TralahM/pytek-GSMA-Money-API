# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.amount_type import AmountType  # noqa: F401,E501
from swagger_client.models.code_lifetime import CodeLifetime  # noqa: F401,E501
from swagger_client.models.hold_funds_indicator import HoldFundsIndicator  # noqa: F401,E501
from swagger_client.models.metadata_array import MetadataArray  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501
from swagger_client.models.redemption_account_identifiers import RedemptionAccountIdentifiers  # noqa: F401,E501
from swagger_client.models.redemption_channels import RedemptionChannels  # noqa: F401,E501
from swagger_client.models.redemption_transaction_types import RedemptionTransactionTypes  # noqa: F401,E501
from swagger_client.models.request_date import RequestDate  # noqa: F401,E501


class RequestAuthorisationCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_date': 'RequestDate',
        'code_lifetime': 'CodeLifetime',
        'amount': 'Object',
        'currency': 'Object',
        'amount_type': 'AmountType',
        'hold_funds_indicator': 'HoldFundsIndicator',
        'redemption_channels': 'RedemptionChannels',
        'redemption_transaction_types': 'RedemptionTransactionTypes',
        'redemption_account_identifiers': 'RedemptionAccountIdentifiers',
        'metadata': 'MetadataArray'
    }

    attribute_map = {
        'request_date': 'requestDate',
        'code_lifetime': 'codeLifetime',
        'amount': 'amount',
        'currency': 'currency',
        'amount_type': 'amountType',
        'hold_funds_indicator': 'holdFundsIndicator',
        'redemption_channels': 'redemptionChannels',
        'redemption_transaction_types': 'redemptionTransactionTypes',
        'redemption_account_identifiers': 'redemptionAccountIdentifiers',
        'metadata': 'metadata'
    }

    def __init__(self, request_date=None, code_lifetime=None, amount=None, currency=None, amount_type=None, hold_funds_indicator=None, redemption_channels=None, redemption_transaction_types=None, redemption_account_identifiers=None, metadata=None):  # noqa: E501
        """RequestAuthorisationCode - a model defined in Swagger"""  # noqa: E501
        self._request_date = None
        self._code_lifetime = None
        self._amount = None
        self._currency = None
        self._amount_type = None
        self._hold_funds_indicator = None
        self._redemption_channels = None
        self._redemption_transaction_types = None
        self._redemption_account_identifiers = None
        self._metadata = None
        self.discriminator = None
        self.request_date = request_date
        if code_lifetime is not None:
            self.code_lifetime = code_lifetime
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if amount_type is not None:
            self.amount_type = amount_type
        if hold_funds_indicator is not None:
            self.hold_funds_indicator = hold_funds_indicator
        if redemption_channels is not None:
            self.redemption_channels = redemption_channels
        if redemption_transaction_types is not None:
            self.redemption_transaction_types = redemption_transaction_types
        if redemption_account_identifiers is not None:
            self.redemption_account_identifiers = redemption_account_identifiers
        if metadata is not None:
            self.metadata = metadata

    @property
    def request_date(self):
        """Gets the request_date of this RequestAuthorisationCode.  # noqa: E501


        :return: The request_date of this RequestAuthorisationCode.  # noqa: E501
        :rtype: RequestDate
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this RequestAuthorisationCode.


        :param request_date: The request_date of this RequestAuthorisationCode.  # noqa: E501
        :type: RequestDate
        """
        if request_date is None:
            raise ValueError("Invalid value for `request_date`, must not be `None`")  # noqa: E501

        self._request_date = request_date

    @property
    def code_lifetime(self):
        """Gets the code_lifetime of this RequestAuthorisationCode.  # noqa: E501


        :return: The code_lifetime of this RequestAuthorisationCode.  # noqa: E501
        :rtype: CodeLifetime
        """
        return self._code_lifetime

    @code_lifetime.setter
    def code_lifetime(self, code_lifetime):
        """Sets the code_lifetime of this RequestAuthorisationCode.


        :param code_lifetime: The code_lifetime of this RequestAuthorisationCode.  # noqa: E501
        :type: CodeLifetime
        """

        self._code_lifetime = code_lifetime

    @property
    def amount(self):
        """Gets the amount of this RequestAuthorisationCode.  # noqa: E501

        Indicates the amount associated with the authorisation code.  # noqa: E501

        :return: The amount of this RequestAuthorisationCode.  # noqa: E501
        :rtype: Object
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RequestAuthorisationCode.

        Indicates the amount associated with the authorisation code.  # noqa: E501

        :param amount: The amount of this RequestAuthorisationCode.  # noqa: E501
        :type: Object
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this RequestAuthorisationCode.  # noqa: E501

        Indicates the Amount Currency. Must be supplied when an amount is supplied.  # noqa: E501

        :return: The currency of this RequestAuthorisationCode.  # noqa: E501
        :rtype: Object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RequestAuthorisationCode.

        Indicates the Amount Currency. Must be supplied when an amount is supplied.  # noqa: E501

        :param currency: The currency of this RequestAuthorisationCode.  # noqa: E501
        :type: Object
        """

        self._currency = currency

    @property
    def amount_type(self):
        """Gets the amount_type of this RequestAuthorisationCode.  # noqa: E501


        :return: The amount_type of this RequestAuthorisationCode.  # noqa: E501
        :rtype: AmountType
        """
        return self._amount_type

    @amount_type.setter
    def amount_type(self, amount_type):
        """Sets the amount_type of this RequestAuthorisationCode.


        :param amount_type: The amount_type of this RequestAuthorisationCode.  # noqa: E501
        :type: AmountType
        """

        self._amount_type = amount_type

    @property
    def hold_funds_indicator(self):
        """Gets the hold_funds_indicator of this RequestAuthorisationCode.  # noqa: E501


        :return: The hold_funds_indicator of this RequestAuthorisationCode.  # noqa: E501
        :rtype: HoldFundsIndicator
        """
        return self._hold_funds_indicator

    @hold_funds_indicator.setter
    def hold_funds_indicator(self, hold_funds_indicator):
        """Sets the hold_funds_indicator of this RequestAuthorisationCode.


        :param hold_funds_indicator: The hold_funds_indicator of this RequestAuthorisationCode.  # noqa: E501
        :type: HoldFundsIndicator
        """

        self._hold_funds_indicator = hold_funds_indicator

    @property
    def redemption_channels(self):
        """Gets the redemption_channels of this RequestAuthorisationCode.  # noqa: E501


        :return: The redemption_channels of this RequestAuthorisationCode.  # noqa: E501
        :rtype: RedemptionChannels
        """
        return self._redemption_channels

    @redemption_channels.setter
    def redemption_channels(self, redemption_channels):
        """Sets the redemption_channels of this RequestAuthorisationCode.


        :param redemption_channels: The redemption_channels of this RequestAuthorisationCode.  # noqa: E501
        :type: RedemptionChannels
        """

        self._redemption_channels = redemption_channels

    @property
    def redemption_transaction_types(self):
        """Gets the redemption_transaction_types of this RequestAuthorisationCode.  # noqa: E501


        :return: The redemption_transaction_types of this RequestAuthorisationCode.  # noqa: E501
        :rtype: RedemptionTransactionTypes
        """
        return self._redemption_transaction_types

    @redemption_transaction_types.setter
    def redemption_transaction_types(self, redemption_transaction_types):
        """Sets the redemption_transaction_types of this RequestAuthorisationCode.


        :param redemption_transaction_types: The redemption_transaction_types of this RequestAuthorisationCode.  # noqa: E501
        :type: RedemptionTransactionTypes
        """

        self._redemption_transaction_types = redemption_transaction_types

    @property
    def redemption_account_identifiers(self):
        """Gets the redemption_account_identifiers of this RequestAuthorisationCode.  # noqa: E501


        :return: The redemption_account_identifiers of this RequestAuthorisationCode.  # noqa: E501
        :rtype: RedemptionAccountIdentifiers
        """
        return self._redemption_account_identifiers

    @redemption_account_identifiers.setter
    def redemption_account_identifiers(self, redemption_account_identifiers):
        """Sets the redemption_account_identifiers of this RequestAuthorisationCode.


        :param redemption_account_identifiers: The redemption_account_identifiers of this RequestAuthorisationCode.  # noqa: E501
        :type: RedemptionAccountIdentifiers
        """

        self._redemption_account_identifiers = redemption_account_identifiers

    @property
    def metadata(self):
        """Gets the metadata of this RequestAuthorisationCode.  # noqa: E501


        :return: The metadata of this RequestAuthorisationCode.  # noqa: E501
        :rtype: MetadataArray
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RequestAuthorisationCode.


        :param metadata: The metadata of this RequestAuthorisationCode.  # noqa: E501
        :type: MetadataArray
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestAuthorisationCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestAuthorisationCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
