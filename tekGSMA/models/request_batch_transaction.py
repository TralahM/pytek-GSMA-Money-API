# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.batch_description import BatchDescription  # noqa: F401,E501
from swagger_client.models.batch_status import BatchStatus  # noqa: F401,E501
from swagger_client.models.batch_title import BatchTitle  # noqa: F401,E501
from swagger_client.models.request_transaction import RequestTransaction  # noqa: F401,E501
from swagger_client.models.scheduled_start_date import ScheduledStartDate  # noqa: F401,E501


class RequestBatchTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_title': 'BatchTitle',
        'batchdescription': 'BatchDescription',
        'scheduled_start_date': 'ScheduledStartDate',
        'batch_status': 'BatchStatus',
        'transactions': 'list[RequestTransaction]'
    }

    attribute_map = {
        'batch_title': 'batchTitle',
        'batchdescription': 'batchdescription',
        'scheduled_start_date': 'scheduledStartDate',
        'batch_status': 'batchStatus',
        'transactions': 'transactions'
    }

    def __init__(self, batch_title=None, batchdescription=None, scheduled_start_date=None, batch_status=None, transactions=None):  # noqa: E501
        """RequestBatchTransaction - a model defined in Swagger"""  # noqa: E501
        self._batch_title = None
        self._batchdescription = None
        self._scheduled_start_date = None
        self._batch_status = None
        self._transactions = None
        self.discriminator = None
        if batch_title is not None:
            self.batch_title = batch_title
        if batchdescription is not None:
            self.batchdescription = batchdescription
        if scheduled_start_date is not None:
            self.scheduled_start_date = scheduled_start_date
        if batch_status is not None:
            self.batch_status = batch_status
        self.transactions = transactions

    @property
    def batch_title(self):
        """Gets the batch_title of this RequestBatchTransaction.  # noqa: E501


        :return: The batch_title of this RequestBatchTransaction.  # noqa: E501
        :rtype: BatchTitle
        """
        return self._batch_title

    @batch_title.setter
    def batch_title(self, batch_title):
        """Sets the batch_title of this RequestBatchTransaction.


        :param batch_title: The batch_title of this RequestBatchTransaction.  # noqa: E501
        :type: BatchTitle
        """

        self._batch_title = batch_title

    @property
    def batchdescription(self):
        """Gets the batchdescription of this RequestBatchTransaction.  # noqa: E501


        :return: The batchdescription of this RequestBatchTransaction.  # noqa: E501
        :rtype: BatchDescription
        """
        return self._batchdescription

    @batchdescription.setter
    def batchdescription(self, batchdescription):
        """Sets the batchdescription of this RequestBatchTransaction.


        :param batchdescription: The batchdescription of this RequestBatchTransaction.  # noqa: E501
        :type: BatchDescription
        """

        self._batchdescription = batchdescription

    @property
    def scheduled_start_date(self):
        """Gets the scheduled_start_date of this RequestBatchTransaction.  # noqa: E501


        :return: The scheduled_start_date of this RequestBatchTransaction.  # noqa: E501
        :rtype: ScheduledStartDate
        """
        return self._scheduled_start_date

    @scheduled_start_date.setter
    def scheduled_start_date(self, scheduled_start_date):
        """Sets the scheduled_start_date of this RequestBatchTransaction.


        :param scheduled_start_date: The scheduled_start_date of this RequestBatchTransaction.  # noqa: E501
        :type: ScheduledStartDate
        """

        self._scheduled_start_date = scheduled_start_date

    @property
    def batch_status(self):
        """Gets the batch_status of this RequestBatchTransaction.  # noqa: E501


        :return: The batch_status of this RequestBatchTransaction.  # noqa: E501
        :rtype: BatchStatus
        """
        return self._batch_status

    @batch_status.setter
    def batch_status(self, batch_status):
        """Sets the batch_status of this RequestBatchTransaction.


        :param batch_status: The batch_status of this RequestBatchTransaction.  # noqa: E501
        :type: BatchStatus
        """

        self._batch_status = batch_status

    @property
    def transactions(self):
        """Gets the transactions of this RequestBatchTransaction.  # noqa: E501

        Collection of Transactions that are to be processed.  # noqa: E501

        :return: The transactions of this RequestBatchTransaction.  # noqa: E501
        :rtype: list[RequestTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this RequestBatchTransaction.

        Collection of Transactions that are to be processed.  # noqa: E501

        :param transactions: The transactions of this RequestBatchTransaction.  # noqa: E501
        :type: list[RequestTransaction]
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestBatchTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestBatchTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
