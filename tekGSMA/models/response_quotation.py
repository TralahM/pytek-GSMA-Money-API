# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.creation_date import CreationDate  # noqa: F401,E501
from swagger_client.models.credit_party_array import CreditPartyArray  # noqa: F401,E501
from swagger_client.models.date_created import DateCreated  # noqa: F401,E501
from swagger_client.models.date_modified import DateModified  # noqa: F401,E501
from swagger_client.models.debit_party_array import DebitPartyArray  # noqa: F401,E501
from swagger_client.models.kyc import Kyc  # noqa: F401,E501
from swagger_client.models.metadata_array import MetadataArray  # noqa: F401,E501
from swagger_client.models.modification_date import ModificationDate  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501
from swagger_client.models.quotation_reference import QuotationReference  # noqa: F401,E501
from swagger_client.models.quotation_status import QuotationStatus  # noqa: F401,E501
from swagger_client.models.quote_array import QuoteArray  # noqa: F401,E501
from swagger_client.models.recipient_blocking_reason import RecipientBlockingReason  # noqa: F401,E501
from swagger_client.models.request_date import RequestDate  # noqa: F401,E501
from swagger_client.models.sender_blocking_reason import SenderBlockingReason  # noqa: F401,E501
from swagger_client.models.sub_type import SubType  # noqa: F401,E501
from swagger_client.models.type import Type  # noqa: F401,E501


class ResponseQuotation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_date': 'RequestDate',
        'debit_party': 'DebitPartyArray',
        'credit_party': 'CreditPartyArray',
        'sender_kyc': 'Kyc',
        'recipient_kyc': 'Kyc',
        'request_amount': 'Object',
        'request_currency': 'Object',
        'type': 'Type',
        'sub_type': 'SubType',
        'chosen_delivery_method': 'Object',
        'quotes': 'QuoteArray',
        'sender_blocking_reason': 'SenderBlockingReason',
        'recipient_blocking_reason': 'RecipientBlockingReason',
        'metadata': 'MetadataArray',
        'quotation_reference': 'QuotationReference',
        'quotation_status': 'QuotationStatus',
        'creation_date': 'CreationDate',
        'modification_date': 'ModificationDate',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified',
        'available_delivery_method': 'Object'
    }

    attribute_map = {
        'request_date': 'requestDate',
        'debit_party': 'debitParty',
        'credit_party': 'creditParty',
        'sender_kyc': 'senderKyc',
        'recipient_kyc': 'recipientKyc',
        'request_amount': 'requestAmount',
        'request_currency': 'requestCurrency',
        'type': 'type',
        'sub_type': 'subType',
        'chosen_delivery_method': 'chosenDeliveryMethod',
        'quotes': 'quotes',
        'sender_blocking_reason': 'senderBlockingReason',
        'recipient_blocking_reason': 'recipientBlockingReason',
        'metadata': 'metadata',
        'quotation_reference': 'quotationReference',
        'quotation_status': 'quotationStatus',
        'creation_date': 'creationDate',
        'modification_date': 'modificationDate',
        'date_created': 'dateCreated',
        'date_modified': 'dateModified',
        'available_delivery_method': 'availableDeliveryMethod'
    }

    def __init__(self, request_date=None, debit_party=None, credit_party=None, sender_kyc=None, recipient_kyc=None, request_amount=None, request_currency=None, type=None, sub_type=None, chosen_delivery_method=None, quotes=None, sender_blocking_reason=None, recipient_blocking_reason=None, metadata=None, quotation_reference=None, quotation_status=None, creation_date=None, modification_date=None, date_created=None, date_modified=None, available_delivery_method=None):  # noqa: E501
        """ResponseQuotation - a model defined in Swagger"""  # noqa: E501
        self._request_date = None
        self._debit_party = None
        self._credit_party = None
        self._sender_kyc = None
        self._recipient_kyc = None
        self._request_amount = None
        self._request_currency = None
        self._type = None
        self._sub_type = None
        self._chosen_delivery_method = None
        self._quotes = None
        self._sender_blocking_reason = None
        self._recipient_blocking_reason = None
        self._metadata = None
        self._quotation_reference = None
        self._quotation_status = None
        self._creation_date = None
        self._modification_date = None
        self._date_created = None
        self._date_modified = None
        self._available_delivery_method = None
        self.discriminator = None
        self.request_date = request_date
        self.debit_party = debit_party
        self.credit_party = credit_party
        if sender_kyc is not None:
            self.sender_kyc = sender_kyc
        if recipient_kyc is not None:
            self.recipient_kyc = recipient_kyc
        self.request_amount = request_amount
        self.request_currency = request_currency
        if type is not None:
            self.type = type
        if sub_type is not None:
            self.sub_type = sub_type
        if chosen_delivery_method is not None:
            self.chosen_delivery_method = chosen_delivery_method
        if quotes is not None:
            self.quotes = quotes
        if sender_blocking_reason is not None:
            self.sender_blocking_reason = sender_blocking_reason
        if recipient_blocking_reason is not None:
            self.recipient_blocking_reason = recipient_blocking_reason
        if metadata is not None:
            self.metadata = metadata
        self.quotation_reference = quotation_reference
        if quotation_status is not None:
            self.quotation_status = quotation_status
        if creation_date is not None:
            self.creation_date = creation_date
        if modification_date is not None:
            self.modification_date = modification_date
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if available_delivery_method is not None:
            self.available_delivery_method = available_delivery_method

    @property
    def request_date(self):
        """Gets the request_date of this ResponseQuotation.  # noqa: E501


        :return: The request_date of this ResponseQuotation.  # noqa: E501
        :rtype: RequestDate
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this ResponseQuotation.


        :param request_date: The request_date of this ResponseQuotation.  # noqa: E501
        :type: RequestDate
        """
        if request_date is None:
            raise ValueError("Invalid value for `request_date`, must not be `None`")  # noqa: E501

        self._request_date = request_date

    @property
    def debit_party(self):
        """Gets the debit_party of this ResponseQuotation.  # noqa: E501


        :return: The debit_party of this ResponseQuotation.  # noqa: E501
        :rtype: DebitPartyArray
        """
        return self._debit_party

    @debit_party.setter
    def debit_party(self, debit_party):
        """Sets the debit_party of this ResponseQuotation.


        :param debit_party: The debit_party of this ResponseQuotation.  # noqa: E501
        :type: DebitPartyArray
        """
        if debit_party is None:
            raise ValueError("Invalid value for `debit_party`, must not be `None`")  # noqa: E501

        self._debit_party = debit_party

    @property
    def credit_party(self):
        """Gets the credit_party of this ResponseQuotation.  # noqa: E501


        :return: The credit_party of this ResponseQuotation.  # noqa: E501
        :rtype: CreditPartyArray
        """
        return self._credit_party

    @credit_party.setter
    def credit_party(self, credit_party):
        """Sets the credit_party of this ResponseQuotation.


        :param credit_party: The credit_party of this ResponseQuotation.  # noqa: E501
        :type: CreditPartyArray
        """
        if credit_party is None:
            raise ValueError("Invalid value for `credit_party`, must not be `None`")  # noqa: E501

        self._credit_party = credit_party

    @property
    def sender_kyc(self):
        """Gets the sender_kyc of this ResponseQuotation.  # noqa: E501


        :return: The sender_kyc of this ResponseQuotation.  # noqa: E501
        :rtype: Kyc
        """
        return self._sender_kyc

    @sender_kyc.setter
    def sender_kyc(self, sender_kyc):
        """Sets the sender_kyc of this ResponseQuotation.


        :param sender_kyc: The sender_kyc of this ResponseQuotation.  # noqa: E501
        :type: Kyc
        """

        self._sender_kyc = sender_kyc

    @property
    def recipient_kyc(self):
        """Gets the recipient_kyc of this ResponseQuotation.  # noqa: E501


        :return: The recipient_kyc of this ResponseQuotation.  # noqa: E501
        :rtype: Kyc
        """
        return self._recipient_kyc

    @recipient_kyc.setter
    def recipient_kyc(self, recipient_kyc):
        """Sets the recipient_kyc of this ResponseQuotation.


        :param recipient_kyc: The recipient_kyc of this ResponseQuotation.  # noqa: E501
        :type: Kyc
        """

        self._recipient_kyc = recipient_kyc

    @property
    def request_amount(self):
        """Gets the request_amount of this ResponseQuotation.  # noqa: E501

        The requested quotation amount.  # noqa: E501

        :return: The request_amount of this ResponseQuotation.  # noqa: E501
        :rtype: Object
        """
        return self._request_amount

    @request_amount.setter
    def request_amount(self, request_amount):
        """Sets the request_amount of this ResponseQuotation.

        The requested quotation amount.  # noqa: E501

        :param request_amount: The request_amount of this ResponseQuotation.  # noqa: E501
        :type: Object
        """
        if request_amount is None:
            raise ValueError("Invalid value for `request_amount`, must not be `None`")  # noqa: E501

        self._request_amount = request_amount

    @property
    def request_currency(self):
        """Gets the request_currency of this ResponseQuotation.  # noqa: E501

        Currency of the requested quotation amount  # noqa: E501

        :return: The request_currency of this ResponseQuotation.  # noqa: E501
        :rtype: Object
        """
        return self._request_currency

    @request_currency.setter
    def request_currency(self, request_currency):
        """Sets the request_currency of this ResponseQuotation.

        Currency of the requested quotation amount  # noqa: E501

        :param request_currency: The request_currency of this ResponseQuotation.  # noqa: E501
        :type: Object
        """
        if request_currency is None:
            raise ValueError("Invalid value for `request_currency`, must not be `None`")  # noqa: E501

        self._request_currency = request_currency

    @property
    def type(self):
        """Gets the type of this ResponseQuotation.  # noqa: E501


        :return: The type of this ResponseQuotation.  # noqa: E501
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseQuotation.


        :param type: The type of this ResponseQuotation.  # noqa: E501
        :type: Type
        """

        self._type = type

    @property
    def sub_type(self):
        """Gets the sub_type of this ResponseQuotation.  # noqa: E501


        :return: The sub_type of this ResponseQuotation.  # noqa: E501
        :rtype: SubType
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this ResponseQuotation.


        :param sub_type: The sub_type of this ResponseQuotation.  # noqa: E501
        :type: SubType
        """

        self._sub_type = sub_type

    @property
    def chosen_delivery_method(self):
        """Gets the chosen_delivery_method of this ResponseQuotation.  # noqa: E501

        The delivery method chosen by the sending end user as the specific delivery method to be used in the quotes received.  # noqa: E501

        :return: The chosen_delivery_method of this ResponseQuotation.  # noqa: E501
        :rtype: Object
        """
        return self._chosen_delivery_method

    @chosen_delivery_method.setter
    def chosen_delivery_method(self, chosen_delivery_method):
        """Sets the chosen_delivery_method of this ResponseQuotation.

        The delivery method chosen by the sending end user as the specific delivery method to be used in the quotes received.  # noqa: E501

        :param chosen_delivery_method: The chosen_delivery_method of this ResponseQuotation.  # noqa: E501
        :type: Object
        """

        self._chosen_delivery_method = chosen_delivery_method

    @property
    def quotes(self):
        """Gets the quotes of this ResponseQuotation.  # noqa: E501


        :return: The quotes of this ResponseQuotation.  # noqa: E501
        :rtype: QuoteArray
        """
        return self._quotes

    @quotes.setter
    def quotes(self, quotes):
        """Sets the quotes of this ResponseQuotation.


        :param quotes: The quotes of this ResponseQuotation.  # noqa: E501
        :type: QuoteArray
        """

        self._quotes = quotes

    @property
    def sender_blocking_reason(self):
        """Gets the sender_blocking_reason of this ResponseQuotation.  # noqa: E501


        :return: The sender_blocking_reason of this ResponseQuotation.  # noqa: E501
        :rtype: SenderBlockingReason
        """
        return self._sender_blocking_reason

    @sender_blocking_reason.setter
    def sender_blocking_reason(self, sender_blocking_reason):
        """Sets the sender_blocking_reason of this ResponseQuotation.


        :param sender_blocking_reason: The sender_blocking_reason of this ResponseQuotation.  # noqa: E501
        :type: SenderBlockingReason
        """

        self._sender_blocking_reason = sender_blocking_reason

    @property
    def recipient_blocking_reason(self):
        """Gets the recipient_blocking_reason of this ResponseQuotation.  # noqa: E501


        :return: The recipient_blocking_reason of this ResponseQuotation.  # noqa: E501
        :rtype: RecipientBlockingReason
        """
        return self._recipient_blocking_reason

    @recipient_blocking_reason.setter
    def recipient_blocking_reason(self, recipient_blocking_reason):
        """Sets the recipient_blocking_reason of this ResponseQuotation.


        :param recipient_blocking_reason: The recipient_blocking_reason of this ResponseQuotation.  # noqa: E501
        :type: RecipientBlockingReason
        """

        self._recipient_blocking_reason = recipient_blocking_reason

    @property
    def metadata(self):
        """Gets the metadata of this ResponseQuotation.  # noqa: E501


        :return: The metadata of this ResponseQuotation.  # noqa: E501
        :rtype: MetadataArray
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ResponseQuotation.


        :param metadata: The metadata of this ResponseQuotation.  # noqa: E501
        :type: MetadataArray
        """

        self._metadata = metadata

    @property
    def quotation_reference(self):
        """Gets the quotation_reference of this ResponseQuotation.  # noqa: E501


        :return: The quotation_reference of this ResponseQuotation.  # noqa: E501
        :rtype: QuotationReference
        """
        return self._quotation_reference

    @quotation_reference.setter
    def quotation_reference(self, quotation_reference):
        """Sets the quotation_reference of this ResponseQuotation.


        :param quotation_reference: The quotation_reference of this ResponseQuotation.  # noqa: E501
        :type: QuotationReference
        """
        if quotation_reference is None:
            raise ValueError("Invalid value for `quotation_reference`, must not be `None`")  # noqa: E501

        self._quotation_reference = quotation_reference

    @property
    def quotation_status(self):
        """Gets the quotation_status of this ResponseQuotation.  # noqa: E501


        :return: The quotation_status of this ResponseQuotation.  # noqa: E501
        :rtype: QuotationStatus
        """
        return self._quotation_status

    @quotation_status.setter
    def quotation_status(self, quotation_status):
        """Sets the quotation_status of this ResponseQuotation.


        :param quotation_status: The quotation_status of this ResponseQuotation.  # noqa: E501
        :type: QuotationStatus
        """

        self._quotation_status = quotation_status

    @property
    def creation_date(self):
        """Gets the creation_date of this ResponseQuotation.  # noqa: E501


        :return: The creation_date of this ResponseQuotation.  # noqa: E501
        :rtype: CreationDate
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ResponseQuotation.


        :param creation_date: The creation_date of this ResponseQuotation.  # noqa: E501
        :type: CreationDate
        """

        self._creation_date = creation_date

    @property
    def modification_date(self):
        """Gets the modification_date of this ResponseQuotation.  # noqa: E501


        :return: The modification_date of this ResponseQuotation.  # noqa: E501
        :rtype: ModificationDate
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ResponseQuotation.


        :param modification_date: The modification_date of this ResponseQuotation.  # noqa: E501
        :type: ModificationDate
        """

        self._modification_date = modification_date

    @property
    def date_created(self):
        """Gets the date_created of this ResponseQuotation.  # noqa: E501


        :return: The date_created of this ResponseQuotation.  # noqa: E501
        :rtype: DateCreated
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ResponseQuotation.


        :param date_created: The date_created of this ResponseQuotation.  # noqa: E501
        :type: DateCreated
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this ResponseQuotation.  # noqa: E501


        :return: The date_modified of this ResponseQuotation.  # noqa: E501
        :rtype: DateModified
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ResponseQuotation.


        :param date_modified: The date_modified of this ResponseQuotation.  # noqa: E501
        :type: DateModified
        """

        self._date_modified = date_modified

    @property
    def available_delivery_method(self):
        """Gets the available_delivery_method of this ResponseQuotation.  # noqa: E501

        Delivery Method that is possible for the intended recipient.  # noqa: E501

        :return: The available_delivery_method of this ResponseQuotation.  # noqa: E501
        :rtype: Object
        """
        return self._available_delivery_method

    @available_delivery_method.setter
    def available_delivery_method(self, available_delivery_method):
        """Sets the available_delivery_method of this ResponseQuotation.

        Delivery Method that is possible for the intended recipient.  # noqa: E501

        :param available_delivery_method: The available_delivery_method of this ResponseQuotation.  # noqa: E501
        :type: Object
        """

        self._available_delivery_method = available_delivery_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseQuotation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseQuotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
