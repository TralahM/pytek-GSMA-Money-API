# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.sub_type import SubType  # noqa: F401,E501
from swagger_client.models.type import Type  # noqa: F401,E501


class RedemptionTransactionTypesInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_type': 'Type',
        'transaction_subtype': 'SubType'
    }

    attribute_map = {
        'transaction_type': 'transactionType',
        'transaction_subtype': 'transactionSubtype'
    }

    def __init__(self, transaction_type=None, transaction_subtype=None):  # noqa: E501
        """RedemptionTransactionTypesInner - a model defined in Swagger"""  # noqa: E501
        self._transaction_type = None
        self._transaction_subtype = None
        self.discriminator = None
        self.transaction_type = transaction_type
        if transaction_subtype is not None:
            self.transaction_subtype = transaction_subtype

    @property
    def transaction_type(self):
        """Gets the transaction_type of this RedemptionTransactionTypesInner.  # noqa: E501


        :return: The transaction_type of this RedemptionTransactionTypesInner.  # noqa: E501
        :rtype: Type
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this RedemptionTransactionTypesInner.


        :param transaction_type: The transaction_type of this RedemptionTransactionTypesInner.  # noqa: E501
        :type: Type
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def transaction_subtype(self):
        """Gets the transaction_subtype of this RedemptionTransactionTypesInner.  # noqa: E501


        :return: The transaction_subtype of this RedemptionTransactionTypesInner.  # noqa: E501
        :rtype: SubType
        """
        return self._transaction_subtype

    @transaction_subtype.setter
    def transaction_subtype(self, transaction_subtype):
        """Sets the transaction_subtype of this RedemptionTransactionTypesInner.


        :param transaction_subtype: The transaction_subtype of this RedemptionTransactionTypesInner.  # noqa: E501
        :type: SubType
        """

        self._transaction_subtype = transaction_subtype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedemptionTransactionTypesInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedemptionTransactionTypesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
