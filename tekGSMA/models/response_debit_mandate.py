# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.creation_date import CreationDate  # noqa: F401,E501
from swagger_client.models.date_created import DateCreated  # noqa: F401,E501
from swagger_client.models.date_modified import DateModified  # noqa: F401,E501
from swagger_client.models.end_date import EndDate  # noqa: F401,E501
from swagger_client.models.mandate_reference import MandateReference  # noqa: F401,E501
from swagger_client.models.modification_date import ModificationDate  # noqa: F401,E501
from swagger_client.models.number_of_payments import NumberOfPayments  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501
from swagger_client.models.request_date import RequestDate  # noqa: F401,E501
from swagger_client.models.start_date import StartDate  # noqa: F401,E501


class ResponseDebitMandate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'Object',
        'amount_limit': 'Object',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'number_of_payments': 'NumberOfPayments',
        'frequency_type': 'Object',
        'mandate_status': 'Object',
        'request_date': 'RequestDate',
        'mandate_reference': 'MandateReference',
        'creation_date': 'CreationDate',
        'modification_date': 'ModificationDate',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    attribute_map = {
        'currency': 'currency',
        'amount_limit': 'amountLimit',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'number_of_payments': 'numberOfPayments',
        'frequency_type': 'frequencyType',
        'mandate_status': 'mandateStatus',
        'request_date': 'requestDate',
        'mandate_reference': 'mandateReference',
        'creation_date': 'creationDate',
        'modification_date': 'modificationDate',
        'date_created': 'dateCreated',
        'date_modified': 'dateModified'
    }

    def __init__(self, currency=None, amount_limit=None, start_date=None, end_date=None, number_of_payments=None, frequency_type=None, mandate_status=None, request_date=None, mandate_reference=None, creation_date=None, modification_date=None, date_created=None, date_modified=None):  # noqa: E501
        """ResponseDebitMandate - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._amount_limit = None
        self._start_date = None
        self._end_date = None
        self._number_of_payments = None
        self._frequency_type = None
        self._mandate_status = None
        self._request_date = None
        self._mandate_reference = None
        self._creation_date = None
        self._modification_date = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if amount_limit is not None:
            self.amount_limit = amount_limit
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if number_of_payments is not None:
            self.number_of_payments = number_of_payments
        if frequency_type is not None:
            self.frequency_type = frequency_type
        if mandate_status is not None:
            self.mandate_status = mandate_status
        if request_date is not None:
            self.request_date = request_date
        self.mandate_reference = mandate_reference
        if creation_date is not None:
            self.creation_date = creation_date
        if modification_date is not None:
            self.modification_date = modification_date
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def currency(self):
        """Gets the currency of this ResponseDebitMandate.  # noqa: E501

        Currency of the principal transaction amount.  # noqa: E501

        :return: The currency of this ResponseDebitMandate.  # noqa: E501
        :rtype: Object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ResponseDebitMandate.

        Currency of the principal transaction amount.  # noqa: E501

        :param currency: The currency of this ResponseDebitMandate.  # noqa: E501
        :type: Object
        """

        self._currency = currency

    @property
    def amount_limit(self):
        """Gets the amount_limit of this ResponseDebitMandate.  # noqa: E501

        The maximum amount that can be taken by the Payee on a payment request.  # noqa: E501

        :return: The amount_limit of this ResponseDebitMandate.  # noqa: E501
        :rtype: Object
        """
        return self._amount_limit

    @amount_limit.setter
    def amount_limit(self, amount_limit):
        """Sets the amount_limit of this ResponseDebitMandate.

        The maximum amount that can be taken by the Payee on a payment request.  # noqa: E501

        :param amount_limit: The amount_limit of this ResponseDebitMandate.  # noqa: E501
        :type: Object
        """

        self._amount_limit = amount_limit

    @property
    def start_date(self):
        """Gets the start_date of this ResponseDebitMandate.  # noqa: E501


        :return: The start_date of this ResponseDebitMandate.  # noqa: E501
        :rtype: StartDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ResponseDebitMandate.


        :param start_date: The start_date of this ResponseDebitMandate.  # noqa: E501
        :type: StartDate
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ResponseDebitMandate.  # noqa: E501


        :return: The end_date of this ResponseDebitMandate.  # noqa: E501
        :rtype: EndDate
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ResponseDebitMandate.


        :param end_date: The end_date of this ResponseDebitMandate.  # noqa: E501
        :type: EndDate
        """

        self._end_date = end_date

    @property
    def number_of_payments(self):
        """Gets the number_of_payments of this ResponseDebitMandate.  # noqa: E501


        :return: The number_of_payments of this ResponseDebitMandate.  # noqa: E501
        :rtype: NumberOfPayments
        """
        return self._number_of_payments

    @number_of_payments.setter
    def number_of_payments(self, number_of_payments):
        """Sets the number_of_payments of this ResponseDebitMandate.


        :param number_of_payments: The number_of_payments of this ResponseDebitMandate.  # noqa: E501
        :type: NumberOfPayments
        """

        self._number_of_payments = number_of_payments

    @property
    def frequency_type(self):
        """Gets the frequency_type of this ResponseDebitMandate.  # noqa: E501

        Indicates the frequency for which payments will be taken from the payers account.  # noqa: E501

        :return: The frequency_type of this ResponseDebitMandate.  # noqa: E501
        :rtype: Object
        """
        return self._frequency_type

    @frequency_type.setter
    def frequency_type(self, frequency_type):
        """Sets the frequency_type of this ResponseDebitMandate.

        Indicates the frequency for which payments will be taken from the payers account.  # noqa: E501

        :param frequency_type: The frequency_type of this ResponseDebitMandate.  # noqa: E501
        :type: Object
        """

        self._frequency_type = frequency_type

    @property
    def mandate_status(self):
        """Gets the mandate_status of this ResponseDebitMandate.  # noqa: E501

        Indicates the status of the Mandate as held in the API Provider system.  # noqa: E501

        :return: The mandate_status of this ResponseDebitMandate.  # noqa: E501
        :rtype: Object
        """
        return self._mandate_status

    @mandate_status.setter
    def mandate_status(self, mandate_status):
        """Sets the mandate_status of this ResponseDebitMandate.

        Indicates the status of the Mandate as held in the API Provider system.  # noqa: E501

        :param mandate_status: The mandate_status of this ResponseDebitMandate.  # noqa: E501
        :type: Object
        """

        self._mandate_status = mandate_status

    @property
    def request_date(self):
        """Gets the request_date of this ResponseDebitMandate.  # noqa: E501


        :return: The request_date of this ResponseDebitMandate.  # noqa: E501
        :rtype: RequestDate
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this ResponseDebitMandate.


        :param request_date: The request_date of this ResponseDebitMandate.  # noqa: E501
        :type: RequestDate
        """

        self._request_date = request_date

    @property
    def mandate_reference(self):
        """Gets the mandate_reference of this ResponseDebitMandate.  # noqa: E501


        :return: The mandate_reference of this ResponseDebitMandate.  # noqa: E501
        :rtype: MandateReference
        """
        return self._mandate_reference

    @mandate_reference.setter
    def mandate_reference(self, mandate_reference):
        """Sets the mandate_reference of this ResponseDebitMandate.


        :param mandate_reference: The mandate_reference of this ResponseDebitMandate.  # noqa: E501
        :type: MandateReference
        """
        if mandate_reference is None:
            raise ValueError("Invalid value for `mandate_reference`, must not be `None`")  # noqa: E501

        self._mandate_reference = mandate_reference

    @property
    def creation_date(self):
        """Gets the creation_date of this ResponseDebitMandate.  # noqa: E501


        :return: The creation_date of this ResponseDebitMandate.  # noqa: E501
        :rtype: CreationDate
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ResponseDebitMandate.


        :param creation_date: The creation_date of this ResponseDebitMandate.  # noqa: E501
        :type: CreationDate
        """

        self._creation_date = creation_date

    @property
    def modification_date(self):
        """Gets the modification_date of this ResponseDebitMandate.  # noqa: E501


        :return: The modification_date of this ResponseDebitMandate.  # noqa: E501
        :rtype: ModificationDate
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ResponseDebitMandate.


        :param modification_date: The modification_date of this ResponseDebitMandate.  # noqa: E501
        :type: ModificationDate
        """

        self._modification_date = modification_date

    @property
    def date_created(self):
        """Gets the date_created of this ResponseDebitMandate.  # noqa: E501


        :return: The date_created of this ResponseDebitMandate.  # noqa: E501
        :rtype: DateCreated
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ResponseDebitMandate.


        :param date_created: The date_created of this ResponseDebitMandate.  # noqa: E501
        :type: DateCreated
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this ResponseDebitMandate.  # noqa: E501


        :return: The date_modified of this ResponseDebitMandate.  # noqa: E501
        :rtype: DateModified
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ResponseDebitMandate.


        :param date_modified: The date_modified of this ResponseDebitMandate.  # noqa: E501
        :type: DateModified
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseDebitMandate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseDebitMandate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
