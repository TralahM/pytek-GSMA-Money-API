# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.delay import Delay  # noqa: F401,E501
from swagger_client.models.planned_restoration_time import PlannedRestorationTime  # noqa: F401,E501
from swagger_client.models.service_status import ServiceStatus  # noqa: F401,E501


class ResponseHeartbeat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_status': 'ServiceStatus',
        'delay': 'Delay',
        'planned_restoration_time': 'PlannedRestorationTime'
    }

    attribute_map = {
        'service_status': 'serviceStatus',
        'delay': 'delay',
        'planned_restoration_time': 'plannedRestorationTime'
    }

    def __init__(self, service_status=None, delay=None, planned_restoration_time=None):  # noqa: E501
        """ResponseHeartbeat - a model defined in Swagger"""  # noqa: E501
        self._service_status = None
        self._delay = None
        self._planned_restoration_time = None
        self.discriminator = None
        self.service_status = service_status
        if delay is not None:
            self.delay = delay
        if planned_restoration_time is not None:
            self.planned_restoration_time = planned_restoration_time

    @property
    def service_status(self):
        """Gets the service_status of this ResponseHeartbeat.  # noqa: E501


        :return: The service_status of this ResponseHeartbeat.  # noqa: E501
        :rtype: ServiceStatus
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this ResponseHeartbeat.


        :param service_status: The service_status of this ResponseHeartbeat.  # noqa: E501
        :type: ServiceStatus
        """
        if service_status is None:
            raise ValueError("Invalid value for `service_status`, must not be `None`")  # noqa: E501

        self._service_status = service_status

    @property
    def delay(self):
        """Gets the delay of this ResponseHeartbeat.  # noqa: E501


        :return: The delay of this ResponseHeartbeat.  # noqa: E501
        :rtype: Delay
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this ResponseHeartbeat.


        :param delay: The delay of this ResponseHeartbeat.  # noqa: E501
        :type: Delay
        """

        self._delay = delay

    @property
    def planned_restoration_time(self):
        """Gets the planned_restoration_time of this ResponseHeartbeat.  # noqa: E501


        :return: The planned_restoration_time of this ResponseHeartbeat.  # noqa: E501
        :rtype: PlannedRestorationTime
        """
        return self._planned_restoration_time

    @planned_restoration_time.setter
    def planned_restoration_time(self, planned_restoration_time):
        """Sets the planned_restoration_time of this ResponseHeartbeat.


        :param planned_restoration_time: The planned_restoration_time of this ResponseHeartbeat.  # noqa: E501
        :type: PlannedRestorationTime
        """

        self._planned_restoration_time = planned_restoration_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseHeartbeat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseHeartbeat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
