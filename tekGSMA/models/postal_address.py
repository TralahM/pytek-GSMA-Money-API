# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.object import Object  # noqa: F401,E501


class PostalAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'address_line3': 'str',
        'city': 'str',
        'state_province': 'str',
        'postal_code': 'str',
        'country': 'Object'
    }

    attribute_map = {
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'address_line3': 'addressLine3',
        'city': 'city',
        'state_province': 'stateProvince',
        'postal_code': 'postalCode',
        'country': 'country'
    }

    def __init__(self, address_line1=None, address_line2=None, address_line3=None, city=None, state_province=None, postal_code=None, country=None):  # noqa: E501
        """PostalAddress - a model defined in Swagger"""  # noqa: E501
        self._address_line1 = None
        self._address_line2 = None
        self._address_line3 = None
        self._city = None
        self._state_province = None
        self._postal_code = None
        self._country = None
        self.discriminator = None
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_line3 is not None:
            self.address_line3 = address_line3
        if city is not None:
            self.city = city
        if state_province is not None:
            self.state_province = state_province
        if postal_code is not None:
            self.postal_code = postal_code
        self.country = country

    @property
    def address_line1(self):
        """Gets the address_line1 of this PostalAddress.  # noqa: E501

        First line of the address.  # noqa: E501

        :return: The address_line1 of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this PostalAddress.

        First line of the address.  # noqa: E501

        :param address_line1: The address_line1 of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this PostalAddress.  # noqa: E501

        Second line of the address.  # noqa: E501

        :return: The address_line2 of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this PostalAddress.

        Second line of the address.  # noqa: E501

        :param address_line2: The address_line2 of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this PostalAddress.  # noqa: E501

        Third line of the address.  # noqa: E501

        :return: The address_line3 of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this PostalAddress.

        Third line of the address.  # noqa: E501

        :param address_line3: The address_line3 of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def city(self):
        """Gets the city of this PostalAddress.  # noqa: E501

        City/Town  # noqa: E501

        :return: The city of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PostalAddress.

        City/Town  # noqa: E501

        :param city: The city of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state_province(self):
        """Gets the state_province of this PostalAddress.  # noqa: E501

        State or Province  # noqa: E501

        :return: The state_province of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this PostalAddress.

        State or Province  # noqa: E501

        :param state_province: The state_province of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._state_province = state_province

    @property
    def postal_code(self):
        """Gets the postal_code of this PostalAddress.  # noqa: E501

        Postal Code  # noqa: E501

        :return: The postal_code of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PostalAddress.

        Postal Code  # noqa: E501

        :param postal_code: The postal_code of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this PostalAddress.  # noqa: E501

        Country\"  # noqa: E501

        :return: The country of this PostalAddress.  # noqa: E501
        :rtype: Object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PostalAddress.

        Country\"  # noqa: E501

        :param country: The country of this PostalAddress.  # noqa: E501
        :type: Object
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostalAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostalAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
