# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.object import Object  # noqa: F401,E501


class IdDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_type': 'str',
        'id_number': 'str',
        'issue_date': 'date',
        'expiry_date': 'date',
        'issuer': 'str',
        'issuer_place': 'str',
        'issuer_country': 'Object',
        'other_iddescription': 'str'
    }

    attribute_map = {
        'id_type': 'idType',
        'id_number': 'idNumber',
        'issue_date': 'issueDate',
        'expiry_date': 'expiryDate',
        'issuer': 'issuer',
        'issuer_place': 'issuerPlace',
        'issuer_country': 'issuerCountry',
        'other_iddescription': 'otherIddescription'
    }

    def __init__(self, id_type=None, id_number=None, issue_date=None, expiry_date=None, issuer=None, issuer_place=None, issuer_country=None, other_iddescription=None):  # noqa: E501
        """IdDocument - a model defined in Swagger"""  # noqa: E501
        self._id_type = None
        self._id_number = None
        self._issue_date = None
        self._expiry_date = None
        self._issuer = None
        self._issuer_place = None
        self._issuer_country = None
        self._other_iddescription = None
        self.discriminator = None
        self.id_type = id_type
        if id_number is not None:
            self.id_number = id_number
        if issue_date is not None:
            self.issue_date = issue_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if issuer is not None:
            self.issuer = issuer
        if issuer_place is not None:
            self.issuer_place = issuer_place
        if issuer_country is not None:
            self.issuer_country = issuer_country
        if other_iddescription is not None:
            self.other_iddescription = other_iddescription

    @property
    def id_type(self):
        """Gets the id_type of this IdDocument.  # noqa: E501

        Indicates the type of identification for the KYC subject, e.g. passport, driving licence etc.  # noqa: E501

        :return: The id_type of this IdDocument.  # noqa: E501
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this IdDocument.

        Indicates the type of identification for the KYC subject, e.g. passport, driving licence etc.  # noqa: E501

        :param id_type: The id_type of this IdDocument.  # noqa: E501
        :type: str
        """
        if id_type is None:
            raise ValueError("Invalid value for `id_type`, must not be `None`")  # noqa: E501
        allowed_values = ["passport", "nationalregistration", "otherId", "drivinglicence", "socialsecurity", "alienregistration", "nationalidcard", "employer", "taxid", "seniorcitizenscard", "marriagecertificate", "birthcertificate", "healthcard", "votersid", "villageelderLetter", "pancard", "officialletter"]  # noqa: E501
        if id_type not in allowed_values:
            raise ValueError(
                "Invalid value for `id_type` ({0}), must be one of {1}"  # noqa: E501
                .format(id_type, allowed_values)
            )

        self._id_type = id_type

    @property
    def id_number(self):
        """Gets the id_number of this IdDocument.  # noqa: E501

        Reference pertaining to the type of identification for the KYC subject.  # noqa: E501

        :return: The id_number of this IdDocument.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this IdDocument.

        Reference pertaining to the type of identification for the KYC subject.  # noqa: E501

        :param id_number: The id_number of this IdDocument.  # noqa: E501
        :type: str
        """

        self._id_number = id_number

    @property
    def issue_date(self):
        """Gets the issue_date of this IdDocument.  # noqa: E501

        Date of issue for the identification document.  # noqa: E501

        :return: The issue_date of this IdDocument.  # noqa: E501
        :rtype: date
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this IdDocument.

        Date of issue for the identification document.  # noqa: E501

        :param issue_date: The issue_date of this IdDocument.  # noqa: E501
        :type: date
        """

        self._issue_date = issue_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this IdDocument.  # noqa: E501

        Date of expiry for the identification document.  # noqa: E501

        :return: The expiry_date of this IdDocument.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this IdDocument.

        Date of expiry for the identification document.  # noqa: E501

        :param expiry_date: The expiry_date of this IdDocument.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def issuer(self):
        """Gets the issuer of this IdDocument.  # noqa: E501

        Indicates the organisation/government entity that issued the ID document.  # noqa: E501

        :return: The issuer of this IdDocument.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this IdDocument.

        Indicates the organisation/government entity that issued the ID document.  # noqa: E501

        :param issuer: The issuer of this IdDocument.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def issuer_place(self):
        """Gets the issuer_place of this IdDocument.  # noqa: E501

        Place of issue for the identification type.  # noqa: E501

        :return: The issuer_place of this IdDocument.  # noqa: E501
        :rtype: str
        """
        return self._issuer_place

    @issuer_place.setter
    def issuer_place(self, issuer_place):
        """Sets the issuer_place of this IdDocument.

        Place of issue for the identification type.  # noqa: E501

        :param issuer_place: The issuer_place of this IdDocument.  # noqa: E501
        :type: str
        """

        self._issuer_place = issuer_place

    @property
    def issuer_country(self):
        """Gets the issuer_country of this IdDocument.  # noqa: E501

        Country where the identification type was issued.  # noqa: E501

        :return: The issuer_country of this IdDocument.  # noqa: E501
        :rtype: Object
        """
        return self._issuer_country

    @issuer_country.setter
    def issuer_country(self, issuer_country):
        """Sets the issuer_country of this IdDocument.

        Country where the identification type was issued.  # noqa: E501

        :param issuer_country: The issuer_country of this IdDocument.  # noqa: E501
        :type: Object
        """

        self._issuer_country = issuer_country

    @property
    def other_iddescription(self):
        """Gets the other_iddescription of this IdDocument.  # noqa: E501

        Where an ID Type of otherid is specified, a description of the type of identification can be provided in this property.  # noqa: E501

        :return: The other_iddescription of this IdDocument.  # noqa: E501
        :rtype: str
        """
        return self._other_iddescription

    @other_iddescription.setter
    def other_iddescription(self, other_iddescription):
        """Sets the other_iddescription of this IdDocument.

        Where an ID Type of otherid is specified, a description of the type of identification can be provided in this property.  # noqa: E501

        :param other_iddescription: The other_iddescription of this IdDocument.  # noqa: E501
        :type: str
        """

        self._other_iddescription = other_iddescription

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
