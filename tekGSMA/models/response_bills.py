# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.bill_description import BillDescription  # noqa: F401,E501
from swagger_client.models.bill_reference import BillReference  # noqa: F401,E501
from swagger_client.models.due_date import DueDate  # noqa: F401,E501
from swagger_client.models.metadata_array import MetadataArray  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501


class ResponseBills(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'Object',
        'amount_due': 'Object',
        'due_date': 'DueDate',
        'bill_reference': 'BillReference',
        'minimum_amount_due': 'Object',
        'billdescription': 'BillDescription',
        'bill_status': 'Object',
        'metadata': 'MetadataArray'
    }

    attribute_map = {
        'currency': 'currency',
        'amount_due': 'amountDue',
        'due_date': 'dueDate',
        'bill_reference': 'billReference',
        'minimum_amount_due': 'minimumAmountDue',
        'billdescription': 'billdescription',
        'bill_status': 'billStatus',
        'metadata': 'metadata'
    }

    def __init__(self, currency=None, amount_due=None, due_date=None, bill_reference=None, minimum_amount_due=None, billdescription=None, bill_status=None, metadata=None):  # noqa: E501
        """ResponseBills - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._amount_due = None
        self._due_date = None
        self._bill_reference = None
        self._minimum_amount_due = None
        self._billdescription = None
        self._bill_status = None
        self._metadata = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if amount_due is not None:
            self.amount_due = amount_due
        if due_date is not None:
            self.due_date = due_date
        if bill_reference is not None:
            self.bill_reference = bill_reference
        if minimum_amount_due is not None:
            self.minimum_amount_due = minimum_amount_due
        if billdescription is not None:
            self.billdescription = billdescription
        if bill_status is not None:
            self.bill_status = bill_status
        if metadata is not None:
            self.metadata = metadata

    @property
    def currency(self):
        """Gets the currency of this ResponseBills.  # noqa: E501

        Currency of the bill to be paid.  # noqa: E501

        :return: The currency of this ResponseBills.  # noqa: E501
        :rtype: Object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ResponseBills.

        Currency of the bill to be paid.  # noqa: E501

        :param currency: The currency of this ResponseBills.  # noqa: E501
        :type: Object
        """

        self._currency = currency

    @property
    def amount_due(self):
        """Gets the amount_due of this ResponseBills.  # noqa: E501

        Amount outstanding on the bill to be paid.  # noqa: E501

        :return: The amount_due of this ResponseBills.  # noqa: E501
        :rtype: Object
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this ResponseBills.

        Amount outstanding on the bill to be paid.  # noqa: E501

        :param amount_due: The amount_due of this ResponseBills.  # noqa: E501
        :type: Object
        """

        self._amount_due = amount_due

    @property
    def due_date(self):
        """Gets the due_date of this ResponseBills.  # noqa: E501


        :return: The due_date of this ResponseBills.  # noqa: E501
        :rtype: DueDate
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ResponseBills.


        :param due_date: The due_date of this ResponseBills.  # noqa: E501
        :type: DueDate
        """

        self._due_date = due_date

    @property
    def bill_reference(self):
        """Gets the bill_reference of this ResponseBills.  # noqa: E501


        :return: The bill_reference of this ResponseBills.  # noqa: E501
        :rtype: BillReference
        """
        return self._bill_reference

    @bill_reference.setter
    def bill_reference(self, bill_reference):
        """Sets the bill_reference of this ResponseBills.


        :param bill_reference: The bill_reference of this ResponseBills.  # noqa: E501
        :type: BillReference
        """

        self._bill_reference = bill_reference

    @property
    def minimum_amount_due(self):
        """Gets the minimum_amount_due of this ResponseBills.  # noqa: E501

        The minimum amount that is outstanding on the bill to be paid.  # noqa: E501

        :return: The minimum_amount_due of this ResponseBills.  # noqa: E501
        :rtype: Object
        """
        return self._minimum_amount_due

    @minimum_amount_due.setter
    def minimum_amount_due(self, minimum_amount_due):
        """Sets the minimum_amount_due of this ResponseBills.

        The minimum amount that is outstanding on the bill to be paid.  # noqa: E501

        :param minimum_amount_due: The minimum_amount_due of this ResponseBills.  # noqa: E501
        :type: Object
        """

        self._minimum_amount_due = minimum_amount_due

    @property
    def billdescription(self):
        """Gets the billdescription of this ResponseBills.  # noqa: E501


        :return: The billdescription of this ResponseBills.  # noqa: E501
        :rtype: BillDescription
        """
        return self._billdescription

    @billdescription.setter
    def billdescription(self, billdescription):
        """Sets the billdescription of this ResponseBills.


        :param billdescription: The billdescription of this ResponseBills.  # noqa: E501
        :type: BillDescription
        """

        self._billdescription = billdescription

    @property
    def bill_status(self):
        """Gets the bill_status of this ResponseBills.  # noqa: E501

        Identifies the status of the Bill.  # noqa: E501

        :return: The bill_status of this ResponseBills.  # noqa: E501
        :rtype: Object
        """
        return self._bill_status

    @bill_status.setter
    def bill_status(self, bill_status):
        """Sets the bill_status of this ResponseBills.

        Identifies the status of the Bill.  # noqa: E501

        :param bill_status: The bill_status of this ResponseBills.  # noqa: E501
        :type: Object
        """

        self._bill_status = bill_status

    @property
    def metadata(self):
        """Gets the metadata of this ResponseBills.  # noqa: E501


        :return: The metadata of this ResponseBills.  # noqa: E501
        :rtype: MetadataArray
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ResponseBills.


        :param metadata: The metadata of this ResponseBills.  # noqa: E501
        :type: MetadataArray
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseBills, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseBills):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
