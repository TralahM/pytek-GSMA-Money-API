# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.object import Object  # noqa: F401,E501


class Fees(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fee_type': 'str',
        'fee_amount': 'Object',
        'fee_currency': 'Object'
    }

    attribute_map = {
        'fee_type': 'feeType',
        'fee_amount': 'feeAmount',
        'fee_currency': 'feeCurrency'
    }

    def __init__(self, fee_type=None, fee_amount=None, fee_currency=None):  # noqa: E501
        """Fees - a model defined in Swagger"""  # noqa: E501
        self._fee_type = None
        self._fee_amount = None
        self._fee_currency = None
        self.discriminator = None
        self.fee_type = fee_type
        self.fee_amount = fee_amount
        self.fee_currency = fee_currency

    @property
    def fee_type(self):
        """Gets the fee_type of this Fees.  # noqa: E501

        Defines the type of fee.  # noqa: E501

        :return: The fee_type of this Fees.  # noqa: E501
        :rtype: str
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this Fees.

        Defines the type of fee.  # noqa: E501

        :param fee_type: The fee_type of this Fees.  # noqa: E501
        :type: str
        """
        if fee_type is None:
            raise ValueError("Invalid value for `fee_type`, must not be `None`")  # noqa: E501

        self._fee_type = fee_type

    @property
    def fee_amount(self):
        """Gets the fee_amount of this Fees.  # noqa: E501

        Defines the amount of the fee.  # noqa: E501

        :return: The fee_amount of this Fees.  # noqa: E501
        :rtype: Object
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this Fees.

        Defines the amount of the fee.  # noqa: E501

        :param fee_amount: The fee_amount of this Fees.  # noqa: E501
        :type: Object
        """
        if fee_amount is None:
            raise ValueError("Invalid value for `fee_amount`, must not be `None`")  # noqa: E501

        self._fee_amount = fee_amount

    @property
    def fee_currency(self):
        """Gets the fee_currency of this Fees.  # noqa: E501

        Defines the currency for the given fee.  # noqa: E501

        :return: The fee_currency of this Fees.  # noqa: E501
        :rtype: Object
        """
        return self._fee_currency

    @fee_currency.setter
    def fee_currency(self, fee_currency):
        """Sets the fee_currency of this Fees.

        Defines the currency for the given fee.  # noqa: E501

        :param fee_currency: The fee_currency of this Fees.  # noqa: E501
        :type: Object
        """
        if fee_currency is None:
            raise ValueError("Invalid value for `fee_currency`, must not be `None`")  # noqa: E501

        self._fee_currency = fee_currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fees, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fees):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
