# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.customer_reference import CustomerReference  # noqa: F401,E501
from swagger_client.models.metadata_array import MetadataArray  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501
from swagger_client.models.requesting_organisation import RequestingOrganisation  # noqa: F401,E501
from swagger_client.models.requesting_organisation_transaction_reference import RequestingOrganisationTransactionReference  # noqa: F401,E501
from swagger_client.models.service_provider_payment_reference import ServiceProviderPaymentReference  # noqa: F401,E501
from swagger_client.models.supplementary_bill_reference_details_array import SupplementaryBillReferenceDetailsArray  # noqa: F401,E501


class RequestBillPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'Object',
        'amount_paid': 'Object',
        'paid_amount': 'Object',
        'service_provider_payment_reference': 'ServiceProviderPaymentReference',
        'requesting_organisation': 'RequestingOrganisation',
        'requesting_organisation_transaction_reference': 'RequestingOrganisationTransactionReference',
        'customer_reference': 'CustomerReference',
        'payment_type': 'Object',
        'supplementary_bill_reference_details': 'SupplementaryBillReferenceDetailsArray',
        'metadata': 'MetadataArray'
    }

    attribute_map = {
        'currency': 'currency',
        'amount_paid': 'amountPaid',
        'paid_amount': 'paidAmount',
        'service_provider_payment_reference': 'serviceProviderPaymentReference',
        'requesting_organisation': 'requestingOrganisation',
        'requesting_organisation_transaction_reference': 'requestingOrganisationTransactionReference',
        'customer_reference': 'customerReference',
        'payment_type': 'paymentType',
        'supplementary_bill_reference_details': 'supplementaryBillReferenceDetails',
        'metadata': 'metadata'
    }

    def __init__(self, currency=None, amount_paid=None, paid_amount=None, service_provider_payment_reference=None, requesting_organisation=None, requesting_organisation_transaction_reference=None, customer_reference=None, payment_type=None, supplementary_bill_reference_details=None, metadata=None):  # noqa: E501
        """RequestBillPayment - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._amount_paid = None
        self._paid_amount = None
        self._service_provider_payment_reference = None
        self._requesting_organisation = None
        self._requesting_organisation_transaction_reference = None
        self._customer_reference = None
        self._payment_type = None
        self._supplementary_bill_reference_details = None
        self._metadata = None
        self.discriminator = None
        self.currency = currency
        self.amount_paid = amount_paid
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if service_provider_payment_reference is not None:
            self.service_provider_payment_reference = service_provider_payment_reference
        if requesting_organisation is not None:
            self.requesting_organisation = requesting_organisation
        if requesting_organisation_transaction_reference is not None:
            self.requesting_organisation_transaction_reference = requesting_organisation_transaction_reference
        if customer_reference is not None:
            self.customer_reference = customer_reference
        if payment_type is not None:
            self.payment_type = payment_type
        if supplementary_bill_reference_details is not None:
            self.supplementary_bill_reference_details = supplementary_bill_reference_details
        if metadata is not None:
            self.metadata = metadata

    @property
    def currency(self):
        """Gets the currency of this RequestBillPayment.  # noqa: E501

        Currency of the amount that is being paid.  # noqa: E501

        :return: The currency of this RequestBillPayment.  # noqa: E501
        :rtype: Object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RequestBillPayment.

        Currency of the amount that is being paid.  # noqa: E501

        :param currency: The currency of this RequestBillPayment.  # noqa: E501
        :type: Object
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def amount_paid(self):
        """Gets the amount_paid of this RequestBillPayment.  # noqa: E501

        Amount of the Bill that is being paid.  # noqa: E501

        :return: The amount_paid of this RequestBillPayment.  # noqa: E501
        :rtype: Object
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this RequestBillPayment.

        Amount of the Bill that is being paid.  # noqa: E501

        :param amount_paid: The amount_paid of this RequestBillPayment.  # noqa: E501
        :type: Object
        """
        if amount_paid is None:
            raise ValueError("Invalid value for `amount_paid`, must not be `None`")  # noqa: E501

        self._amount_paid = amount_paid

    @property
    def paid_amount(self):
        """Gets the paid_amount of this RequestBillPayment.  # noqa: E501

        Amount of the Bill that is being paid.  # noqa: E501

        :return: The paid_amount of this RequestBillPayment.  # noqa: E501
        :rtype: Object
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this RequestBillPayment.

        Amount of the Bill that is being paid.  # noqa: E501

        :param paid_amount: The paid_amount of this RequestBillPayment.  # noqa: E501
        :type: Object
        """

        self._paid_amount = paid_amount

    @property
    def service_provider_payment_reference(self):
        """Gets the service_provider_payment_reference of this RequestBillPayment.  # noqa: E501


        :return: The service_provider_payment_reference of this RequestBillPayment.  # noqa: E501
        :rtype: ServiceProviderPaymentReference
        """
        return self._service_provider_payment_reference

    @service_provider_payment_reference.setter
    def service_provider_payment_reference(self, service_provider_payment_reference):
        """Sets the service_provider_payment_reference of this RequestBillPayment.


        :param service_provider_payment_reference: The service_provider_payment_reference of this RequestBillPayment.  # noqa: E501
        :type: ServiceProviderPaymentReference
        """

        self._service_provider_payment_reference = service_provider_payment_reference

    @property
    def requesting_organisation(self):
        """Gets the requesting_organisation of this RequestBillPayment.  # noqa: E501


        :return: The requesting_organisation of this RequestBillPayment.  # noqa: E501
        :rtype: RequestingOrganisation
        """
        return self._requesting_organisation

    @requesting_organisation.setter
    def requesting_organisation(self, requesting_organisation):
        """Sets the requesting_organisation of this RequestBillPayment.


        :param requesting_organisation: The requesting_organisation of this RequestBillPayment.  # noqa: E501
        :type: RequestingOrganisation
        """

        self._requesting_organisation = requesting_organisation

    @property
    def requesting_organisation_transaction_reference(self):
        """Gets the requesting_organisation_transaction_reference of this RequestBillPayment.  # noqa: E501


        :return: The requesting_organisation_transaction_reference of this RequestBillPayment.  # noqa: E501
        :rtype: RequestingOrganisationTransactionReference
        """
        return self._requesting_organisation_transaction_reference

    @requesting_organisation_transaction_reference.setter
    def requesting_organisation_transaction_reference(self, requesting_organisation_transaction_reference):
        """Sets the requesting_organisation_transaction_reference of this RequestBillPayment.


        :param requesting_organisation_transaction_reference: The requesting_organisation_transaction_reference of this RequestBillPayment.  # noqa: E501
        :type: RequestingOrganisationTransactionReference
        """

        self._requesting_organisation_transaction_reference = requesting_organisation_transaction_reference

    @property
    def customer_reference(self):
        """Gets the customer_reference of this RequestBillPayment.  # noqa: E501


        :return: The customer_reference of this RequestBillPayment.  # noqa: E501
        :rtype: CustomerReference
        """
        return self._customer_reference

    @customer_reference.setter
    def customer_reference(self, customer_reference):
        """Sets the customer_reference of this RequestBillPayment.


        :param customer_reference: The customer_reference of this RequestBillPayment.  # noqa: E501
        :type: CustomerReference
        """

        self._customer_reference = customer_reference

    @property
    def payment_type(self):
        """Gets the payment_type of this RequestBillPayment.  # noqa: E501

        Describes the type of Bill Payment, i.e. whether a full or partial payment.  # noqa: E501

        :return: The payment_type of this RequestBillPayment.  # noqa: E501
        :rtype: Object
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this RequestBillPayment.

        Describes the type of Bill Payment, i.e. whether a full or partial payment.  # noqa: E501

        :param payment_type: The payment_type of this RequestBillPayment.  # noqa: E501
        :type: Object
        """

        self._payment_type = payment_type

    @property
    def supplementary_bill_reference_details(self):
        """Gets the supplementary_bill_reference_details of this RequestBillPayment.  # noqa: E501


        :return: The supplementary_bill_reference_details of this RequestBillPayment.  # noqa: E501
        :rtype: SupplementaryBillReferenceDetailsArray
        """
        return self._supplementary_bill_reference_details

    @supplementary_bill_reference_details.setter
    def supplementary_bill_reference_details(self, supplementary_bill_reference_details):
        """Sets the supplementary_bill_reference_details of this RequestBillPayment.


        :param supplementary_bill_reference_details: The supplementary_bill_reference_details of this RequestBillPayment.  # noqa: E501
        :type: SupplementaryBillReferenceDetailsArray
        """

        self._supplementary_bill_reference_details = supplementary_bill_reference_details

    @property
    def metadata(self):
        """Gets the metadata of this RequestBillPayment.  # noqa: E501


        :return: The metadata of this RequestBillPayment.  # noqa: E501
        :rtype: MetadataArray
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RequestBillPayment.


        :param metadata: The metadata of this RequestBillPayment.  # noqa: E501
        :type: MetadataArray
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestBillPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestBillPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
