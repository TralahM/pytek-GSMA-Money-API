# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.credit_party_array import CreditPartyArray  # noqa: F401,E501
from swagger_client.models.debit_party_array import DebitPartyArray  # noqa: F401,E501
from swagger_client.models.kyc import Kyc  # noqa: F401,E501
from swagger_client.models.metadata_array import MetadataArray  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501
from swagger_client.models.request_date import RequestDate  # noqa: F401,E501
from swagger_client.models.sub_type import SubType  # noqa: F401,E501
from swagger_client.models.type import Type  # noqa: F401,E501


class RequestQuotation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_date': 'RequestDate',
        'debit_party': 'DebitPartyArray',
        'credit_party': 'CreditPartyArray',
        'sender_kyc': 'Kyc',
        'recipient_kyc': 'Kyc',
        'request_amount': 'Object',
        'request_currency': 'Object',
        'type': 'Type',
        'sub_type': 'SubType',
        'chosen_delivery_method': 'Object',
        'metadata': 'MetadataArray'
    }

    attribute_map = {
        'request_date': 'requestDate',
        'debit_party': 'debitParty',
        'credit_party': 'creditParty',
        'sender_kyc': 'senderKyc',
        'recipient_kyc': 'recipientKyc',
        'request_amount': 'requestAmount',
        'request_currency': 'requestCurrency',
        'type': 'type',
        'sub_type': 'subType',
        'chosen_delivery_method': 'chosenDeliveryMethod',
        'metadata': 'metadata'
    }

    def __init__(self, request_date=None, debit_party=None, credit_party=None, sender_kyc=None, recipient_kyc=None, request_amount=None, request_currency=None, type=None, sub_type=None, chosen_delivery_method=None, metadata=None):  # noqa: E501
        """RequestQuotation - a model defined in Swagger"""  # noqa: E501
        self._request_date = None
        self._debit_party = None
        self._credit_party = None
        self._sender_kyc = None
        self._recipient_kyc = None
        self._request_amount = None
        self._request_currency = None
        self._type = None
        self._sub_type = None
        self._chosen_delivery_method = None
        self._metadata = None
        self.discriminator = None
        self.request_date = request_date
        self.debit_party = debit_party
        self.credit_party = credit_party
        if sender_kyc is not None:
            self.sender_kyc = sender_kyc
        if recipient_kyc is not None:
            self.recipient_kyc = recipient_kyc
        self.request_amount = request_amount
        self.request_currency = request_currency
        if type is not None:
            self.type = type
        if sub_type is not None:
            self.sub_type = sub_type
        if chosen_delivery_method is not None:
            self.chosen_delivery_method = chosen_delivery_method
        if metadata is not None:
            self.metadata = metadata

    @property
    def request_date(self):
        """Gets the request_date of this RequestQuotation.  # noqa: E501


        :return: The request_date of this RequestQuotation.  # noqa: E501
        :rtype: RequestDate
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this RequestQuotation.


        :param request_date: The request_date of this RequestQuotation.  # noqa: E501
        :type: RequestDate
        """
        if request_date is None:
            raise ValueError("Invalid value for `request_date`, must not be `None`")  # noqa: E501

        self._request_date = request_date

    @property
    def debit_party(self):
        """Gets the debit_party of this RequestQuotation.  # noqa: E501


        :return: The debit_party of this RequestQuotation.  # noqa: E501
        :rtype: DebitPartyArray
        """
        return self._debit_party

    @debit_party.setter
    def debit_party(self, debit_party):
        """Sets the debit_party of this RequestQuotation.


        :param debit_party: The debit_party of this RequestQuotation.  # noqa: E501
        :type: DebitPartyArray
        """
        if debit_party is None:
            raise ValueError("Invalid value for `debit_party`, must not be `None`")  # noqa: E501

        self._debit_party = debit_party

    @property
    def credit_party(self):
        """Gets the credit_party of this RequestQuotation.  # noqa: E501


        :return: The credit_party of this RequestQuotation.  # noqa: E501
        :rtype: CreditPartyArray
        """
        return self._credit_party

    @credit_party.setter
    def credit_party(self, credit_party):
        """Sets the credit_party of this RequestQuotation.


        :param credit_party: The credit_party of this RequestQuotation.  # noqa: E501
        :type: CreditPartyArray
        """
        if credit_party is None:
            raise ValueError("Invalid value for `credit_party`, must not be `None`")  # noqa: E501

        self._credit_party = credit_party

    @property
    def sender_kyc(self):
        """Gets the sender_kyc of this RequestQuotation.  # noqa: E501


        :return: The sender_kyc of this RequestQuotation.  # noqa: E501
        :rtype: Kyc
        """
        return self._sender_kyc

    @sender_kyc.setter
    def sender_kyc(self, sender_kyc):
        """Sets the sender_kyc of this RequestQuotation.


        :param sender_kyc: The sender_kyc of this RequestQuotation.  # noqa: E501
        :type: Kyc
        """

        self._sender_kyc = sender_kyc

    @property
    def recipient_kyc(self):
        """Gets the recipient_kyc of this RequestQuotation.  # noqa: E501


        :return: The recipient_kyc of this RequestQuotation.  # noqa: E501
        :rtype: Kyc
        """
        return self._recipient_kyc

    @recipient_kyc.setter
    def recipient_kyc(self, recipient_kyc):
        """Sets the recipient_kyc of this RequestQuotation.


        :param recipient_kyc: The recipient_kyc of this RequestQuotation.  # noqa: E501
        :type: Kyc
        """

        self._recipient_kyc = recipient_kyc

    @property
    def request_amount(self):
        """Gets the request_amount of this RequestQuotation.  # noqa: E501

        The requested quotation amount.  # noqa: E501

        :return: The request_amount of this RequestQuotation.  # noqa: E501
        :rtype: Object
        """
        return self._request_amount

    @request_amount.setter
    def request_amount(self, request_amount):
        """Sets the request_amount of this RequestQuotation.

        The requested quotation amount.  # noqa: E501

        :param request_amount: The request_amount of this RequestQuotation.  # noqa: E501
        :type: Object
        """
        if request_amount is None:
            raise ValueError("Invalid value for `request_amount`, must not be `None`")  # noqa: E501

        self._request_amount = request_amount

    @property
    def request_currency(self):
        """Gets the request_currency of this RequestQuotation.  # noqa: E501

        Currency of the requested quotation amount  # noqa: E501

        :return: The request_currency of this RequestQuotation.  # noqa: E501
        :rtype: Object
        """
        return self._request_currency

    @request_currency.setter
    def request_currency(self, request_currency):
        """Sets the request_currency of this RequestQuotation.

        Currency of the requested quotation amount  # noqa: E501

        :param request_currency: The request_currency of this RequestQuotation.  # noqa: E501
        :type: Object
        """
        if request_currency is None:
            raise ValueError("Invalid value for `request_currency`, must not be `None`")  # noqa: E501

        self._request_currency = request_currency

    @property
    def type(self):
        """Gets the type of this RequestQuotation.  # noqa: E501


        :return: The type of this RequestQuotation.  # noqa: E501
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RequestQuotation.


        :param type: The type of this RequestQuotation.  # noqa: E501
        :type: Type
        """

        self._type = type

    @property
    def sub_type(self):
        """Gets the sub_type of this RequestQuotation.  # noqa: E501


        :return: The sub_type of this RequestQuotation.  # noqa: E501
        :rtype: SubType
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this RequestQuotation.


        :param sub_type: The sub_type of this RequestQuotation.  # noqa: E501
        :type: SubType
        """

        self._sub_type = sub_type

    @property
    def chosen_delivery_method(self):
        """Gets the chosen_delivery_method of this RequestQuotation.  # noqa: E501

        The delivery method chosen by the sending end user as the specific delivery method to be used in the quotes received.  # noqa: E501

        :return: The chosen_delivery_method of this RequestQuotation.  # noqa: E501
        :rtype: Object
        """
        return self._chosen_delivery_method

    @chosen_delivery_method.setter
    def chosen_delivery_method(self, chosen_delivery_method):
        """Sets the chosen_delivery_method of this RequestQuotation.

        The delivery method chosen by the sending end user as the specific delivery method to be used in the quotes received.  # noqa: E501

        :param chosen_delivery_method: The chosen_delivery_method of this RequestQuotation.  # noqa: E501
        :type: Object
        """

        self._chosen_delivery_method = chosen_delivery_method

    @property
    def metadata(self):
        """Gets the metadata of this RequestQuotation.  # noqa: E501


        :return: The metadata of this RequestQuotation.  # noqa: E501
        :rtype: MetadataArray
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RequestQuotation.


        :param metadata: The metadata of this RequestQuotation.  # noqa: E501
        :type: MetadataArray
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestQuotation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestQuotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
