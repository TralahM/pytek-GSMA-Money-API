# coding: utf-8

"""
    Mobile Money API

    This document defines the RESTful endpoints provided by the GSMA Mobile Money API You can find out more about what the API can do for your business at [https://developer.mobilemoneyapi.io]   # noqa: E501

    OpenAPI spec version: 1.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.contact_phone import ContactPhone  # noqa: F401,E501
from swagger_client.models.date_of_birth import DateOfBirth  # noqa: F401,E501
from swagger_client.models.email_address import EmailAddress  # noqa: F401,E501
from swagger_client.models.employer_name import EmployerName  # noqa: F401,E501
from swagger_client.models.gender import Gender  # noqa: F401,E501
from swagger_client.models.id_document_array import IdDocumentArray  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501
from swagger_client.models.occupation import Occupation  # noqa: F401,E501
from swagger_client.models.postal_address import PostalAddress  # noqa: F401,E501
from swagger_client.models.subject_name import SubjectName  # noqa: F401,E501


class Kyc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nationality': 'Object',
        'date_of_birth': 'DateOfBirth',
        'occupation': 'Occupation',
        'employer_name': 'EmployerName',
        'contact_phone': 'ContactPhone',
        'gender': 'Gender',
        'id_document': 'IdDocumentArray',
        'postal_address': 'PostalAddress',
        'subject_name': 'SubjectName',
        'email_address': 'EmailAddress',
        'birth_country': 'Object'
    }

    attribute_map = {
        'nationality': 'nationality',
        'date_of_birth': 'dateOfBirth',
        'occupation': 'occupation',
        'employer_name': 'employerName',
        'contact_phone': 'contactPhone',
        'gender': 'gender',
        'id_document': 'idDocument',
        'postal_address': 'postalAddress',
        'subject_name': 'subjectName',
        'email_address': 'emailAddress',
        'birth_country': 'birthCountry'
    }

    def __init__(self, nationality=None, date_of_birth=None, occupation=None, employer_name=None, contact_phone=None, gender=None, id_document=None, postal_address=None, subject_name=None, email_address=None, birth_country=None):  # noqa: E501
        """Kyc - a model defined in Swagger"""  # noqa: E501
        self._nationality = None
        self._date_of_birth = None
        self._occupation = None
        self._employer_name = None
        self._contact_phone = None
        self._gender = None
        self._id_document = None
        self._postal_address = None
        self._subject_name = None
        self._email_address = None
        self._birth_country = None
        self.discriminator = None
        if nationality is not None:
            self.nationality = nationality
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if occupation is not None:
            self.occupation = occupation
        if employer_name is not None:
            self.employer_name = employer_name
        if contact_phone is not None:
            self.contact_phone = contact_phone
        if gender is not None:
            self.gender = gender
        if id_document is not None:
            self.id_document = id_document
        if postal_address is not None:
            self.postal_address = postal_address
        if subject_name is not None:
            self.subject_name = subject_name
        if email_address is not None:
            self.email_address = email_address
        if birth_country is not None:
            self.birth_country = birth_country

    @property
    def nationality(self):
        """Gets the nationality of this Kyc.  # noqa: E501

        Nationality of the KYC subject.  # noqa: E501

        :return: The nationality of this Kyc.  # noqa: E501
        :rtype: Object
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Kyc.

        Nationality of the KYC subject.  # noqa: E501

        :param nationality: The nationality of this Kyc.  # noqa: E501
        :type: Object
        """

        self._nationality = nationality

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Kyc.  # noqa: E501


        :return: The date_of_birth of this Kyc.  # noqa: E501
        :rtype: DateOfBirth
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Kyc.


        :param date_of_birth: The date_of_birth of this Kyc.  # noqa: E501
        :type: DateOfBirth
        """

        self._date_of_birth = date_of_birth

    @property
    def occupation(self):
        """Gets the occupation of this Kyc.  # noqa: E501


        :return: The occupation of this Kyc.  # noqa: E501
        :rtype: Occupation
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this Kyc.


        :param occupation: The occupation of this Kyc.  # noqa: E501
        :type: Occupation
        """

        self._occupation = occupation

    @property
    def employer_name(self):
        """Gets the employer_name of this Kyc.  # noqa: E501


        :return: The employer_name of this Kyc.  # noqa: E501
        :rtype: EmployerName
        """
        return self._employer_name

    @employer_name.setter
    def employer_name(self, employer_name):
        """Sets the employer_name of this Kyc.


        :param employer_name: The employer_name of this Kyc.  # noqa: E501
        :type: EmployerName
        """

        self._employer_name = employer_name

    @property
    def contact_phone(self):
        """Gets the contact_phone of this Kyc.  # noqa: E501


        :return: The contact_phone of this Kyc.  # noqa: E501
        :rtype: ContactPhone
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this Kyc.


        :param contact_phone: The contact_phone of this Kyc.  # noqa: E501
        :type: ContactPhone
        """

        self._contact_phone = contact_phone

    @property
    def gender(self):
        """Gets the gender of this Kyc.  # noqa: E501


        :return: The gender of this Kyc.  # noqa: E501
        :rtype: Gender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Kyc.


        :param gender: The gender of this Kyc.  # noqa: E501
        :type: Gender
        """

        self._gender = gender

    @property
    def id_document(self):
        """Gets the id_document of this Kyc.  # noqa: E501


        :return: The id_document of this Kyc.  # noqa: E501
        :rtype: IdDocumentArray
        """
        return self._id_document

    @id_document.setter
    def id_document(self, id_document):
        """Sets the id_document of this Kyc.


        :param id_document: The id_document of this Kyc.  # noqa: E501
        :type: IdDocumentArray
        """

        self._id_document = id_document

    @property
    def postal_address(self):
        """Gets the postal_address of this Kyc.  # noqa: E501


        :return: The postal_address of this Kyc.  # noqa: E501
        :rtype: PostalAddress
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this Kyc.


        :param postal_address: The postal_address of this Kyc.  # noqa: E501
        :type: PostalAddress
        """

        self._postal_address = postal_address

    @property
    def subject_name(self):
        """Gets the subject_name of this Kyc.  # noqa: E501


        :return: The subject_name of this Kyc.  # noqa: E501
        :rtype: SubjectName
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this Kyc.


        :param subject_name: The subject_name of this Kyc.  # noqa: E501
        :type: SubjectName
        """

        self._subject_name = subject_name

    @property
    def email_address(self):
        """Gets the email_address of this Kyc.  # noqa: E501


        :return: The email_address of this Kyc.  # noqa: E501
        :rtype: EmailAddress
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Kyc.


        :param email_address: The email_address of this Kyc.  # noqa: E501
        :type: EmailAddress
        """

        self._email_address = email_address

    @property
    def birth_country(self):
        """Gets the birth_country of this Kyc.  # noqa: E501

        The country of birth of the KYC subject.  # noqa: E501

        :return: The birth_country of this Kyc.  # noqa: E501
        :rtype: Object
        """
        return self._birth_country

    @birth_country.setter
    def birth_country(self, birth_country):
        """Sets the birth_country of this Kyc.

        The country of birth of the KYC subject.  # noqa: E501

        :param birth_country: The birth_country of this Kyc.  # noqa: E501
        :type: Object
        """

        self._birth_country = birth_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Kyc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Kyc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
